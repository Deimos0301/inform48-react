{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\n\nexport function isVerticalPlacement(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\n\nexport function getOppositePlacement(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n\n    case \"left\":\n      return \"right\";\n\n    case \"bottom\":\n      return \"top\";\n\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\n\nexport function getAlignment(placement) {\n  var align = placement.split(\"-\")[1];\n\n  switch (align) {\n    case \"start\":\n      return \"left\";\n\n    case \"end\":\n      return \"right\";\n\n    default:\n      return \"center\";\n  }\n} // Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\n\nexport function getTransformOrigin(placement, arrowStyles) {\n  var basePlacement = getBasePlacement(placement);\n\n  if (arrowStyles === undefined) {\n    return isVerticalPlacement(basePlacement) ? \"\".concat(getOppositePlacement(basePlacement), \" \").concat(getAlignment(basePlacement)) : \"\".concat(getAlignment(basePlacement), \" \").concat(getOppositePlacement(basePlacement));\n  } else {\n    // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n    var arrowSizeShift = 30 / 2; // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n\n    return isVerticalPlacement(basePlacement) ? \"\".concat(getOppositePlacement(basePlacement), \" \").concat(parseInt(arrowStyles.top, 10) + arrowSizeShift, \"px\") : \"\".concat(parseInt(arrowStyles.left, 10) + arrowSizeShift, \"px \").concat(getOppositePlacement(basePlacement));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}