{"ast":null,"code":"/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Boundary, Breadcrumb, Classes as CoreClasses, Menu, OverflowList, removeNonHTMLProps } from \"@blueprintjs/core\";\nimport { MenuItem2 } from \"./menuItem2\";\nimport { Popover2 } from \"./popover2\";\n\nvar Breadcrumbs2 =\n/** @class */\nfunction (_super) {\n  __extends(Breadcrumbs2, _super);\n\n  function Breadcrumbs2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderOverflow = function (items) {\n      var _a = _this.props,\n          collapseFrom = _a.collapseFrom,\n          popoverProps = _a.popoverProps;\n      var orderedItems = items;\n\n      if (collapseFrom === Boundary.START) {\n        // If we're collapsing from the start, the menu should be read from the bottom to the\n        // top, continuing with the breadcrumbs to the right. Since this means the first\n        // breadcrumb in the props must be the last in the menu, we need to reverse the overlow\n        // order.\n        orderedItems = items.slice().reverse();\n      }\n\n      return React.createElement(\"li\", null, React.createElement(Popover2, __assign({\n        placement: collapseFrom === Boundary.END ? \"bottom-end\" : \"bottom-start\",\n        disabled: orderedItems.length === 0,\n        content: React.createElement(Menu, null, orderedItems.map(_this.renderOverflowBreadcrumb))\n      }, popoverProps), React.createElement(\"span\", {\n        className: CoreClasses.BREADCRUMBS_COLLAPSED\n      })));\n    };\n\n    _this.renderOverflowBreadcrumb = function (props, index) {\n      var isClickable = props.href != null || props.onClick != null;\n      var htmlProps = removeNonHTMLProps(props);\n      return React.createElement(MenuItem2, __assign({\n        disabled: !isClickable\n      }, htmlProps, {\n        text: props.text,\n        key: index\n      }));\n    };\n\n    _this.renderBreadcrumbWrapper = function (props, index) {\n      var isCurrent = _this.props.items[_this.props.items.length - 1] === props;\n      return React.createElement(\"li\", {\n        key: index\n      }, _this.renderBreadcrumb(props, isCurrent));\n    };\n\n    return _this;\n  }\n\n  Breadcrumbs2.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        collapseFrom = _a.collapseFrom,\n        items = _a.items,\n        minVisibleItems = _a.minVisibleItems,\n        _b = _a.overflowListProps,\n        overflowListProps = _b === void 0 ? {} : _b;\n    return React.createElement(OverflowList, __assign({\n      collapseFrom: collapseFrom,\n      minVisibleItems: minVisibleItems,\n      tagName: \"ul\"\n    }, overflowListProps, {\n      className: classNames(CoreClasses.BREADCRUMBS, overflowListProps.className, className),\n      items: items,\n      overflowRenderer: this.renderOverflow,\n      visibleItemRenderer: this.renderBreadcrumbWrapper\n    }));\n  };\n\n  Breadcrumbs2.prototype.renderBreadcrumb = function (props, isCurrent) {\n    if (isCurrent && this.props.currentBreadcrumbRenderer != null) {\n      return this.props.currentBreadcrumbRenderer(props);\n    } else if (this.props.breadcrumbRenderer != null) {\n      return this.props.breadcrumbRenderer(props);\n    } else {\n      // allow user to override 'current' prop\n      return React.createElement(Breadcrumb, __assign({\n        current: isCurrent\n      }, props));\n    }\n  };\n\n  Breadcrumbs2.defaultProps = {\n    collapseFrom: Boundary.START\n  };\n  return Breadcrumbs2;\n}(AbstractPureComponent2);\n\nexport { Breadcrumbs2 };","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Boundary","Breadcrumb","Classes","CoreClasses","Menu","OverflowList","removeNonHTMLProps","MenuItem2","Popover2","__extends","_this","items","props","collapseFrom","popoverProps","orderedItems","START","slice","reverse","__assign","placement","END","disabled","length","content","map","renderOverflowBreadcrumb","className","BREADCRUMBS_COLLAPSED","index","isClickable","href","onClick","htmlProps","text","key","isCurrent","renderBreadcrumb","Breadcrumbs2","minVisibleItems","_b","overflowListProps","tagName","BREADCRUMBS","overflowRenderer","renderOverflow","visibleItemRenderer","renderBreadcrumbWrapper","currentBreadcrumbRenderer","breadcrumbRenderer","current"],"sources":["/home/administrator/Рабочий стол/inform48-react/inform48/node_modules/@blueprintjs/popover2/src/breadcrumbs2.tsx"],"sourcesContent":["/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Boundary,\n    Breadcrumb,\n    BreadcrumbProps,\n    Classes as CoreClasses,\n    Menu,\n    OverflowList,\n    OverflowListProps,\n    Props,\n    removeNonHTMLProps,\n} from \"@blueprintjs/core\";\n\nimport { MenuItem2 } from \"./menuItem2\";\nimport { Popover2, Popover2Props } from \"./popover2\";\n\nexport { BreadcrumbProps };\nexport interface Breadcrumbs2Props extends Props {\n    /**\n     * Callback invoked to render visible breadcrumbs. Best practice is to\n     * render a `<Breadcrumb>` element. If `currentBreadcrumbRenderer` is also\n     * supplied, that callback will be used for the current breadcrumb instead.\n     *\n     * @default Breadcrumb\n     */\n    breadcrumbRenderer?: (props: BreadcrumbProps) => JSX.Element;\n\n    /**\n     * Which direction the breadcrumbs should collapse from: start or end.\n     *\n     * @default Boundary.START\n     */\n    collapseFrom?: Boundary;\n\n    /**\n     * Callback invoked to render the current breadcrumb, which is the last\n     * element in the `items` array.\n     *\n     * If this prop is omitted, `breadcrumbRenderer` will be invoked for the\n     * current breadcrumb instead.\n     */\n    currentBreadcrumbRenderer?: (props: BreadcrumbProps) => JSX.Element;\n\n    /**\n     * All breadcrumbs to display. Breadcrumbs that do not fit in the container\n     * will be rendered in an overflow menu instead.\n     */\n    items: readonly BreadcrumbProps[];\n\n    /**\n     * The minimum number of visible breadcrumbs that should never collapse into\n     * the overflow menu, regardless of DOM dimensions.\n     *\n     * @default 0\n     */\n    minVisibleItems?: number;\n\n    /**\n     * Props to spread to `OverflowList`. Note that `items`,\n     * `overflowRenderer`, and `visibleItemRenderer` cannot be changed.\n     */\n    overflowListProps?: Partial<\n        Omit<OverflowListProps<BreadcrumbProps>, \"items\" | \"overflowRenderer\" | \"visibleItemRenderer\">\n    >;\n\n    /**\n     * Props to spread to the popover showing the overflow menu.\n     */\n    popoverProps?: Partial<\n        Omit<Popover2Props, \"content\" | \"defaultIsOpen\" | \"disabled\" | \"fill\" | \"renderTarget\" | \"targetTagName\">\n    >;\n}\n\nexport class Breadcrumbs2 extends AbstractPureComponent2<Breadcrumbs2Props> {\n    public static defaultProps: Partial<Breadcrumbs2Props> = {\n        collapseFrom: Boundary.START,\n    };\n\n    public render() {\n        const { className, collapseFrom, items, minVisibleItems, overflowListProps = {} } = this.props;\n        return (\n            <OverflowList\n                collapseFrom={collapseFrom}\n                minVisibleItems={minVisibleItems}\n                tagName=\"ul\"\n                {...overflowListProps}\n                className={classNames(CoreClasses.BREADCRUMBS, overflowListProps.className, className)}\n                items={items}\n                overflowRenderer={this.renderOverflow}\n                visibleItemRenderer={this.renderBreadcrumbWrapper}\n            />\n        );\n    }\n\n    private renderOverflow = (items: readonly BreadcrumbProps[]) => {\n        const { collapseFrom, popoverProps } = this.props;\n\n        let orderedItems = items;\n        if (collapseFrom === Boundary.START) {\n            // If we're collapsing from the start, the menu should be read from the bottom to the\n            // top, continuing with the breadcrumbs to the right. Since this means the first\n            // breadcrumb in the props must be the last in the menu, we need to reverse the overlow\n            // order.\n            orderedItems = items.slice().reverse();\n        }\n\n        return (\n            <li>\n                <Popover2\n                    placement={collapseFrom === Boundary.END ? \"bottom-end\" : \"bottom-start\"}\n                    disabled={orderedItems.length === 0}\n                    content={<Menu>{orderedItems.map(this.renderOverflowBreadcrumb)}</Menu>}\n                    {...popoverProps}\n                >\n                    <span className={CoreClasses.BREADCRUMBS_COLLAPSED} />\n                </Popover2>\n            </li>\n        );\n    };\n\n    private renderOverflowBreadcrumb = (props: BreadcrumbProps, index: number) => {\n        const isClickable = props.href != null || props.onClick != null;\n        const htmlProps = removeNonHTMLProps(props);\n        return <MenuItem2 disabled={!isClickable} {...htmlProps} text={props.text} key={index} />;\n    };\n\n    private renderBreadcrumbWrapper = (props: BreadcrumbProps, index: number) => {\n        const isCurrent = this.props.items[this.props.items.length - 1] === props;\n        return <li key={index}>{this.renderBreadcrumb(props, isCurrent)}</li>;\n    };\n\n    private renderBreadcrumb(props: BreadcrumbProps, isCurrent: boolean) {\n        if (isCurrent && this.props.currentBreadcrumbRenderer != null) {\n            return this.props.currentBreadcrumbRenderer(props);\n        } else if (this.props.breadcrumbRenderer != null) {\n            return this.props.breadcrumbRenderer(props);\n        } else {\n            // allow user to override 'current' prop\n            return <Breadcrumb current={isCurrent} {...props} />;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}