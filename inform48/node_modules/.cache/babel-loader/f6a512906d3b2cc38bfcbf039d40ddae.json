{"ast":null,"code":"/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes as CoreClasses, DISPLAYNAME_PREFIX, Icon, Menu, Text } from \"@blueprintjs/core\";\nimport * as Classes from \"./classes\";\nimport { Popover2 } from \"./popover2\";\n\nvar MenuItem2 =\n/** @class */\nfunction (_super) {\n  __extends(MenuItem2, _super);\n\n  function MenuItem2() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MenuItem2.prototype.render = function () {\n    var _a, _b;\n\n    var _c;\n\n    var _d = this.props,\n        active = _d.active,\n        className = _d.className,\n        children = _d.children,\n        disabled = _d.disabled,\n        intent = _d.intent,\n        labelClassName = _d.labelClassName,\n        labelElement = _d.labelElement,\n        multiline = _d.multiline,\n        popoverProps = _d.popoverProps,\n        _e = _d.roleStructure,\n        roleStructure = _e === void 0 ? \"menuitem\" : _e,\n        selected = _d.selected,\n        shouldDismissPopover = _d.shouldDismissPopover,\n        submenuProps = _d.submenuProps,\n        text = _d.text,\n        textClassName = _d.textClassName,\n        _f = _d.tagName,\n        tagName = _f === void 0 ? \"a\" : _f,\n        htmlTitle = _d.htmlTitle,\n        htmlProps = __rest(_d, [\"active\", \"className\", \"children\", \"disabled\", \"intent\", \"labelClassName\", \"labelElement\", \"multiline\", \"popoverProps\", \"roleStructure\", \"selected\", \"shouldDismissPopover\", \"submenuProps\", \"text\", \"textClassName\", \"tagName\", \"htmlTitle\"]);\n\n    var _g = roleStructure === \"listoption\" ? // \"listoption\": parent has listbox role, or is a <select>\n    [\"option\", undefined, (_c = this.props.icon) !== null && _c !== void 0 ? _c : selected === undefined ? undefined : selected ? \"small-tick\" : \"blank\", Boolean(selected) // aria-selected prop\n    ] : // \"menuitem\": parent has menu role\n    [\"none\", \"menuitem\", this.props.icon, undefined // don't set aria-selected prop\n    ],\n        liRole = _g[0],\n        targetRole = _g[1],\n        icon = _g[2],\n        ariaSelected = _g[3];\n\n    var hasIcon = icon != null;\n    var hasSubmenu = children != null;\n    var intentClass = CoreClasses.intentClass(intent);\n    var anchorClasses = classNames(CoreClasses.MENU_ITEM, intentClass, (_a = {}, _a[CoreClasses.ACTIVE] = active, _a[CoreClasses.DISABLED] = disabled, // prevent popover from closing when clicking on submenu trigger or disabled item\n    _a[Classes.POPOVER2_DISMISS] = shouldDismissPopover && !disabled && !hasSubmenu, _a[CoreClasses.SELECTED] = active && intentClass === undefined, _a), className);\n    var target = React.createElement(tagName, __assign(__assign(__assign({\n      role: targetRole,\n      tabIndex: 0\n    }, htmlProps), disabled ? DISABLED_PROPS : {}), {\n      className: anchorClasses\n    }), hasIcon ? // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n    // so that we always render this class\n    React.createElement(\"span\", {\n      className: CoreClasses.MENU_ITEM_ICON\n    }, React.createElement(Icon, {\n      icon: icon,\n      \"aria-hidden\": true,\n      tabIndex: -1\n    })) : undefined, React.createElement(Text, {\n      className: classNames(CoreClasses.FILL, textClassName),\n      ellipsize: !multiline,\n      title: htmlTitle\n    }, text), this.maybeRenderLabel(labelElement), hasSubmenu ? React.createElement(Icon, {\n      className: CoreClasses.MENU_SUBMENU_ICON,\n      icon: \"caret-right\"\n    }) : undefined);\n    var liClasses = classNames((_b = {}, _b[CoreClasses.MENU_SUBMENU] = hasSubmenu, _b));\n    return React.createElement(\"li\", {\n      className: liClasses,\n      role: liRole,\n      \"aria-selected\": ariaSelected\n    }, this.maybeRenderPopover(target, children));\n  };\n\n  MenuItem2.prototype.maybeRenderLabel = function (labelElement) {\n    var _a = this.props,\n        label = _a.label,\n        labelClassName = _a.labelClassName;\n\n    if (label == null && labelElement == null) {\n      return null;\n    }\n\n    return React.createElement(\"span\", {\n      className: classNames(CoreClasses.MENU_ITEM_LABEL, labelClassName)\n    }, label, labelElement);\n  };\n\n  MenuItem2.prototype.maybeRenderPopover = function (target, children) {\n    if (children == null) {\n      return target;\n    }\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        popoverProps = _a.popoverProps,\n        submenuProps = _a.submenuProps;\n    return React.createElement(Popover2, __assign({\n      autoFocus: false,\n      captureDismiss: false,\n      disabled: disabled,\n      enforceFocus: false,\n      hoverCloseDelay: 0,\n      interactionKind: \"hover\",\n      modifiers: SUBMENU_POPOVER_MODIFIERS,\n      placement: \"right-start\",\n      usePortal: false\n    }, popoverProps, {\n      content: React.createElement(Menu, __assign({}, submenuProps), children),\n      minimal: true,\n      popoverClassName: classNames(CoreClasses.MENU_SUBMENU, popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.popoverClassName)\n    }), target);\n  };\n\n  MenuItem2.defaultProps = {\n    active: false,\n    disabled: false,\n    multiline: false,\n    popoverProps: {},\n    selected: undefined,\n    shouldDismissPopover: true,\n    text: \"\"\n  };\n  MenuItem2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MenuItem2\");\n  return MenuItem2;\n}(AbstractPureComponent2);\n\nexport { MenuItem2 };\nvar SUBMENU_POPOVER_MODIFIERS = {\n  // 20px padding - scrollbar width + a bit\n  flip: {\n    options: {\n      rootBoundary: \"viewport\",\n      padding: 20\n    },\n    enabled: true\n  },\n  // shift popover up 5px so MenuItems align\n  offset: {\n    options: {\n      offset: [-5, 0]\n    },\n    enabled: true\n  },\n  preventOverflow: {\n    options: {\n      rootBoundary: \"viewport\",\n      padding: 20\n    },\n    enabled: true\n  }\n}; // props to ignore when disabled\n\nvar DISABLED_PROPS = {\n  href: undefined,\n  onClick: undefined,\n  onMouseDown: undefined,\n  onMouseEnter: undefined,\n  onMouseLeave: undefined,\n  tabIndex: -1\n};","map":null,"metadata":{},"sourceType":"module"}