{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { PortalContext } from \"../../context/portal/portalProvider\";\nimport { usePrevious } from \"../../hooks/usePrevious\";\nvar REACT_CONTEXT_TYPES = {\n  blueprintPortalClassName: function blueprintPortalClassName(obj, key) {\n    if (obj[key] != null && typeof obj[key] !== \"string\") {\n      return new Error(Errors.PORTAL_CONTEXT_CLASS_NAME_STRING);\n    }\n\n    return undefined;\n  }\n};\n/**\n * This component detaches its contents and re-attaches them to document.body.\n * Use it when you need to circumvent DOM z-stacking (for dialogs, popovers, etc.).\n * Any class names passed to this element will be propagated to the new container element on document.body.\n */\n\nexport function Portal(props, legacyContext) {\n  if (legacyContext === void 0) {\n    legacyContext = {};\n  }\n\n  var context = React.useContext(PortalContext);\n\n  var _a = React.useState(false),\n      hasMounted = _a[0],\n      setHasMounted = _a[1];\n\n  var _b = React.useState(),\n      portalElement = _b[0],\n      setPortalElement = _b[1];\n\n  var createContainerElement = React.useCallback(function () {\n    var container = document.createElement(\"div\");\n    container.classList.add(Classes.PORTAL);\n    maybeAddClass(container.classList, props.className); // directly added to this portal element\n\n    maybeAddClass(container.classList, context.portalClassName); // added via PortalProvider context\n\n    var blueprintPortalClassName = legacyContext.blueprintPortalClassName;\n\n    if (blueprintPortalClassName != null && blueprintPortalClassName !== \"\") {\n      console.error(Errors.PORTAL_LEGACY_CONTEXT_API);\n      maybeAddClass(container.classList, blueprintPortalClassName); // added via legacy context\n    }\n\n    return container;\n  }, [props.className, context.portalClassName]); // create the container element & attach it to the DOM\n\n  React.useEffect(function () {\n    if (props.container == null) {\n      return;\n    }\n\n    var newPortalElement = createContainerElement();\n    props.container.appendChild(newPortalElement);\n    setPortalElement(newPortalElement);\n    setHasMounted(true);\n    return function () {\n      newPortalElement.remove();\n      setHasMounted(false);\n      setPortalElement(undefined);\n    };\n  }, [props.container, createContainerElement]); // wait until next successful render to invoke onChildrenMount callback\n\n  React.useEffect(function () {\n    var _a;\n\n    if (hasMounted) {\n      (_a = props.onChildrenMount) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }, [hasMounted, props.onChildrenMount]); // update className prop on portal DOM element when props change\n\n  var prevClassName = usePrevious(props.className);\n  React.useEffect(function () {\n    if (portalElement != null) {\n      maybeRemoveClass(portalElement.classList, prevClassName);\n      maybeAddClass(portalElement.classList, props.className);\n    }\n  }, [props.className]); // Only render `children` once this component has mounted in a browser environment, so they are\n  // immediately attached to the DOM tree and can do DOM things like measuring or `autoFocus`.\n  // See long comment on componentDidMount in https://reactjs.org/docs/portals.html#event-bubbling-through-portals\n\n  if (typeof document === \"undefined\" || !hasMounted || portalElement == null) {\n    return null;\n  } else {\n    return ReactDOM.createPortal(props.children, portalElement);\n  }\n}\nPortal.defaultProps = {\n  container: typeof document !== \"undefined\" ? document.body : undefined\n};\nPortal.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Portal\");\nPortal.contextTypes = REACT_CONTEXT_TYPES;\n\nfunction maybeRemoveClass(classList, className) {\n  if (className != null && className !== \"\") {\n    classList.remove.apply(classList, className.split(\" \"));\n  }\n}\n\nfunction maybeAddClass(classList, className) {\n  if (className != null && className !== \"\") {\n    classList.add.apply(classList, className.split(\" \"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}