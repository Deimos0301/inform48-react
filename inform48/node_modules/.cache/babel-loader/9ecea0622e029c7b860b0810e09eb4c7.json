{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\nimport * as Classes from \"./classes\"; // eslint-disable-next-line import/no-cycle\n\nimport { Popover2, Popover2InteractionKind } from \"./popover2\";\nimport { TOOLTIP_ARROW_SVG_SIZE } from \"./popover2Arrow\";\nimport { Tooltip2Context, Tooltip2Provider } from \"./tooltip2Context\";\n\nvar Tooltip2 =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip2, _super);\n\n  function Tooltip2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.popover = null; // any descendant ContextMenu2s may update this ctxState\n\n    _this.renderPopover = function (ctxState) {\n      var _a;\n\n      var _b;\n\n      var _c = _this.props,\n          children = _c.children,\n          disabled = _c.disabled,\n          intent = _c.intent,\n          popoverClassName = _c.popoverClassName,\n          restProps = __rest(_c, [\"children\", \"disabled\", \"intent\", \"popoverClassName\"]);\n\n      var classes = classNames(Classes.TOOLTIP2, (_a = {}, _a[CoreClasses.MINIMAL] = _this.props.minimal, _a), CoreClasses.intentClass(intent), popoverClassName);\n      return React.createElement(Popover2, __assign({\n        interactionKind: Popover2InteractionKind.HOVER_TARGET_ONLY,\n        modifiers: {\n          arrow: {\n            enabled: !_this.props.minimal\n          },\n          offset: {\n            options: {\n              offset: [0, TOOLTIP_ARROW_SVG_SIZE / 2]\n            }\n          }\n        }\n      }, restProps, {\n        autoFocus: false,\n        canEscapeKeyClose: false,\n        disabled: (_b = ctxState.forceDisabled) !== null && _b !== void 0 ? _b : disabled,\n        enforceFocus: false,\n        lazy: true,\n        popoverClassName: classes,\n        portalContainer: _this.props.portalContainer,\n        ref: function ref(_ref) {\n          return _this.popover = _ref;\n        }\n      }), children);\n    };\n\n    return _this;\n  }\n\n  Tooltip2.prototype.render = function () {\n    var _this = this; // if we have an ancestor Tooltip2Context, we should take its state into account in this render path,\n    // it was likely created by a parent ContextMenu2\n\n\n    return React.createElement(Tooltip2Context.Consumer, null, function (_a) {\n      var state = _a[0];\n      return React.createElement(Tooltip2Provider, __assign({}, state), _this.renderPopover);\n    });\n  };\n\n  Tooltip2.prototype.reposition = function () {\n    if (this.popover != null) {\n      this.popover.reposition();\n    }\n  };\n\n  Tooltip2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Tooltip2\");\n  Tooltip2.defaultProps = {\n    hoverCloseDelay: 0,\n    hoverOpenDelay: 100,\n    minimal: false,\n    transitionDuration: 100\n  };\n  return Tooltip2;\n}(React.PureComponent);\n\nexport { Tooltip2 };","map":null,"metadata":{},"sourceType":"module"}