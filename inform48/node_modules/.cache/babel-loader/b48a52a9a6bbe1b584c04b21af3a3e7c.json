{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function elementIsOrContains(element, testElement) {\n  return element === testElement || element.contains(testElement);\n}\n/**\n * Gets the active element in the document or shadow root (if an element is provided, and it's in the shadow DOM).\n */\n\nexport function getActiveElement(element, options) {\n  var _a;\n\n  if (element == null) {\n    return document.activeElement;\n  }\n\n  var rootNode = (_a = element.getRootNode(options)) !== null && _a !== void 0 ? _a : document;\n  return rootNode.activeElement;\n}\n/**\n * Throttle an event on an EventTarget by wrapping it in a\n * `requestAnimationFrame` call. Returns the event handler that was bound to\n * given eventName so you can clean up after yourself.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Events/scroll\n */\n\n/* istanbul ignore next */\n\nexport function throttleEvent(target, eventName, newEventName) {\n  var throttledFunc = throttleImpl(function (event) {\n    target.dispatchEvent(new CustomEvent(newEventName, event));\n  });\n  target.addEventListener(eventName, throttledFunc);\n  return throttledFunc;\n}\n/**\n * Throttle a callback by wrapping it in a `requestAnimationFrame` call. Returns\n * the throttled function.\n *\n * @see https://www.html5rocks.com/en/tutorials/speed/animations/\n */\n\nexport function throttleReactEventCallback(callback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var throttledFunc = throttleImpl(callback, function (event2) {\n    if (options.preventDefault) {\n      event2.preventDefault();\n    }\n  }, // prevent React from reclaiming the event object before we reference it\n  function (event2) {\n    return event2.persist();\n  });\n  return throttledFunc;\n}\n/**\n * Throttle a method by wrapping it in a `requestAnimationFrame` call. Returns\n * the throttled function.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function throttle(method) {\n  return throttleImpl(method);\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\nfunction throttleImpl(onAnimationFrameRequested, onBeforeIsRunningCheck, onAfterIsRunningCheck) {\n  var isRunning = false;\n\n  var func = function func() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    onBeforeIsRunningCheck === null || onBeforeIsRunningCheck === void 0 ? void 0 : onBeforeIsRunningCheck.apply(void 0, args);\n\n    if (isRunning) {\n      return;\n    }\n\n    isRunning = true;\n    onAfterIsRunningCheck === null || onAfterIsRunningCheck === void 0 ? void 0 : onAfterIsRunningCheck.apply(void 0, args);\n    requestAnimationFrame(function () {\n      onAnimationFrameRequested.apply(void 0, args);\n      isRunning = false;\n    });\n  };\n\n  return func;\n}","map":null,"metadata":{},"sourceType":"module"}