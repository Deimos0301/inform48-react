{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\nimport * as Classes from \"./classes\"; // eslint-disable-next-line import/no-cycle\n\nimport { Popover2, Popover2InteractionKind } from \"./popover2\";\nimport { TOOLTIP_ARROW_SVG_SIZE } from \"./popover2Arrow\";\nimport { Tooltip2Context, Tooltip2Provider } from \"./tooltip2Context\";\n\nvar Tooltip2 =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip2, _super);\n\n  function Tooltip2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.popover = null; // any descendant ContextMenu2s may update this ctxState\n\n    _this.renderPopover = function (ctxState) {\n      var _a;\n\n      var _b;\n\n      var _c = _this.props,\n          children = _c.children,\n          disabled = _c.disabled,\n          intent = _c.intent,\n          popoverClassName = _c.popoverClassName,\n          restProps = __rest(_c, [\"children\", \"disabled\", \"intent\", \"popoverClassName\"]);\n\n      var classes = classNames(Classes.TOOLTIP2, (_a = {}, _a[CoreClasses.MINIMAL] = _this.props.minimal, _a), CoreClasses.intentClass(intent), popoverClassName);\n      return React.createElement(Popover2, __assign({\n        interactionKind: Popover2InteractionKind.HOVER_TARGET_ONLY,\n        modifiers: {\n          arrow: {\n            enabled: !_this.props.minimal\n          },\n          offset: {\n            options: {\n              offset: [0, TOOLTIP_ARROW_SVG_SIZE / 2]\n            }\n          }\n        }\n      }, restProps, {\n        autoFocus: false,\n        canEscapeKeyClose: false,\n        disabled: (_b = ctxState.forceDisabled) !== null && _b !== void 0 ? _b : disabled,\n        enforceFocus: false,\n        lazy: true,\n        popoverClassName: classes,\n        portalContainer: _this.props.portalContainer,\n        ref: function (ref) {\n          return _this.popover = ref;\n        }\n      }), children);\n    };\n\n    return _this;\n  }\n\n  Tooltip2.prototype.render = function () {\n    var _this = this; // if we have an ancestor Tooltip2Context, we should take its state into account in this render path,\n    // it was likely created by a parent ContextMenu2\n\n\n    return React.createElement(Tooltip2Context.Consumer, null, function (_a) {\n      var state = _a[0];\n      return React.createElement(Tooltip2Provider, __assign({}, state), _this.renderPopover);\n    });\n  };\n\n  Tooltip2.prototype.reposition = function () {\n    if (this.popover != null) {\n      this.popover.reposition();\n    }\n  };\n\n  Tooltip2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Tooltip2\");\n  Tooltip2.defaultProps = {\n    hoverCloseDelay: 0,\n    hoverOpenDelay: 100,\n    minimal: false,\n    transitionDuration: 100\n  };\n  return Tooltip2;\n}(React.PureComponent);\n\nexport { Tooltip2 };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAO,IAAIC,WAApB,EAAiCC,kBAAjC,QAAwE,mBAAxE;AAEA,OAAO,KAAKF,OAAZ,MAAyB,WAAzB,C,CACA;;AACA,SAASG,QAAT,EAAmBC,uBAAnB,QAAkD,YAAlD;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AAEA,SAASC,eAAT,EAAgDC,gBAAhD,QAAwE,mBAAxE;;AAmDA;AAAA;AAAA;EAAiCC;;EAAjC;IAAA;;IAUYC,gBAA8B,IAA9B,CAVZ,CA4BI;;IACQA,sBAAgB,UAACC,QAAD,EAA+B;;;;;MACnD,IAAMC,KAAiEF,KAAI,CAACG,KAA5E;MAAA,IAAQC,QAAQ,cAAhB;MAAA,IAAkBC,QAAQ,cAA1B;MAAA,IAA4BC,MAAM,YAAlC;MAAA,IAAoCC,gBAAgB,sBAApD;MAAA,IAAyDC,SAAS,cAA5D,sDAA4D,CAAlE;;MACA,IAAMC,OAAO,GAAGpB,UAAU,CACtBE,OAAO,CAACmB,QADc,GACNC,SACdA,GAACnB,WAAW,CAACoB,OAAb,IAAuBZ,KAAI,CAACG,KAAL,CAAWU,OADpB,EAC2BF,EAFrB,GAGtBnB,WAAW,CAACsB,WAAZ,CAAwBR,MAAxB,CAHsB,EAItBC,gBAJsB,CAA1B;MAOA,OACIjB,oBAACI,QAAD,EAASqB;QACLC,eAAe,EAAErB,uBAAuB,CAACsB,iBADpC;QAELC,SAAS,EAAE;UACPC,KAAK,EAAE;YACHC,OAAO,EAAE,CAACpB,KAAI,CAACG,KAAL,CAAWU;UADlB,CADA;UAIPQ,MAAM,EAAE;YACJC,OAAO,EAAE;cACLD,MAAM,EAAE,CAAC,CAAD,EAAIzB,sBAAsB,GAAG,CAA7B;YADH;UADL;QAJD;MAFN,GAYDY,SAZC,EAYQ;QACbe,SAAS,EAAE,KADE;QAEbC,iBAAiB,EAAE,KAFN;QAGbnB,QAAQ,EAAE,cAAQ,CAACoB,aAAT,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsBA,EAAtB,GAA0BrB,QAHvB;QAIbsB,YAAY,EAAE,KAJD;QAKbC,IAAI,EAAE,IALO;QAMbrB,gBAAgB,EAAEE,OANL;QAOboB,eAAe,EAAE7B,KAAI,CAACG,KAAL,CAAW0B,eAPf;QAQbC,GAAG,EAAE,eAAG;UAAI,OAAC9B,KAAI,CAAC+B,OAAL,GAAeD,GAAhB;QAAoB;MARnB,CAZR,CAAT,EAsBK1B,QAtBL,CADJ;IA0BH,CAnCO;;;EAoCX;;EArDU4B,4BAAP;IAAA,kBACI;IACA;;;IACA,OACI1C,oBAACO,eAAe,CAACoC,QAAjB,EAAyB,IAAzB,EACK,UAACtB,EAAD,EAAQ;UAANuB,KAAK;MAAM,2BAACpC,gBAAD,EAAiBiB,aAAKmB,KAAL,CAAjB,EAA8BlC,KAAI,CAACmC,aAAnC;IAAoE,CADtF,CADJ;EAKH,CARM;;EAUAH,gCAAP;IACI,IAAI,KAAKD,OAAL,IAAgB,IAApB,EAA0B;MACtB,KAAKA,OAAL,CAAaK,UAAb;IACH;EACJ,CAJM;;EArBOJ,uBAAc,UAAGvC,kBAAH,EAAqB,WAArB,CAAd;EAEAuC,wBAAuC;IACjDK,eAAe,EAAE,CADgC;IAEjDC,cAAc,EAAE,GAFiC;IAGjDzB,OAAO,EAAE,KAHwC;IAIjD0B,kBAAkB,EAAE;EAJ6B,CAAvC;EA8DlB;AAAC,CAjED,CAAiCjD,KAAK,CAACkD,aAAvC;;SAAaR","names":["classNames","React","Classes","CoreClasses","DISPLAYNAME_PREFIX","Popover2","Popover2InteractionKind","TOOLTIP_ARROW_SVG_SIZE","Tooltip2Context","Tooltip2Provider","__extends","_this","ctxState","_c","props","children","disabled","intent","popoverClassName","restProps","classes","TOOLTIP2","_a","MINIMAL","minimal","intentClass","__assign","interactionKind","HOVER_TARGET_ONLY","modifiers","arrow","enabled","offset","options","autoFocus","canEscapeKeyClose","forceDisabled","_b","enforceFocus","lazy","portalContainer","ref","popover","Tooltip2","Consumer","state","renderPopover","reposition","hoverCloseDelay","hoverOpenDelay","transitionDuration","PureComponent"],"sources":["/home/administrator/Рабочий стол/inform48-react/inform48/node_modules/@blueprintjs/popover2/src/tooltip2.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX, IntentProps } from \"@blueprintjs/core\";\n\nimport * as Classes from \"./classes\";\n// eslint-disable-next-line import/no-cycle\nimport { Popover2, Popover2InteractionKind } from \"./popover2\";\nimport { TOOLTIP_ARROW_SVG_SIZE } from \"./popover2Arrow\";\nimport { Popover2SharedProps } from \"./popover2SharedProps\";\nimport { Tooltip2Context, Tooltip2ContextState, Tooltip2Provider } from \"./tooltip2Context\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type Tooltip2Props<TProps = React.HTMLProps<HTMLElement>> = ITooltip2Props<TProps>;\n/** @deprecated use Tooltip2Props */\nexport interface ITooltip2Props<TProps = React.HTMLProps<HTMLElement>>\n    extends Omit<Popover2SharedProps<TProps>, \"shouldReturnFocusOnClose\">,\n        IntentProps {\n    /**\n     * The content that will be displayed inside of the tooltip.\n     */\n    content: JSX.Element | string;\n\n    /**\n     * The amount of time in milliseconds the tooltip should remain open after\n     * the user hovers off the trigger. The timer is canceled if the user mouses\n     * over the target before it expires.\n     *\n     * @default 0\n     */\n    hoverCloseDelay?: number;\n\n    /**\n     * The amount of time in milliseconds the tooltip should wait before opening\n     * after the user hovers over the trigger. The timer is canceled if the user\n     * mouses away from the target before it expires.\n     *\n     * @default 100\n     */\n    hoverOpenDelay?: number;\n\n    /**\n     * The kind of hover interaction that triggers the display of the tooltip.\n     * Tooltips do not support click interactions.\n     *\n     * @default PopoverInteractionKind.HOVER_TARGET_ONLY\n     */\n    interactionKind?: typeof Popover2InteractionKind.HOVER | typeof Popover2InteractionKind.HOVER_TARGET_ONLY;\n\n    /**\n     * Indicates how long (in milliseconds) the tooltip's appear/disappear\n     * transition takes. This is used by React `CSSTransition` to know when a\n     * transition completes and must match the duration of the animation in CSS.\n     * Only set this prop if you override Blueprint's default transitions with\n     * new transitions of a different length.\n     *\n     * @default 100\n     */\n    transitionDuration?: number;\n}\n\nexport class Tooltip2<T> extends React.PureComponent<Tooltip2Props<T>> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.Tooltip2`;\n\n    public static defaultProps: Partial<Tooltip2Props> = {\n        hoverCloseDelay: 0,\n        hoverOpenDelay: 100,\n        minimal: false,\n        transitionDuration: 100,\n    };\n\n    private popover: Popover2<T> | null = null;\n\n    public render() {\n        // if we have an ancestor Tooltip2Context, we should take its state into account in this render path,\n        // it was likely created by a parent ContextMenu2\n        return (\n            <Tooltip2Context.Consumer>\n                {([state]) => <Tooltip2Provider {...state}>{this.renderPopover}</Tooltip2Provider>}\n            </Tooltip2Context.Consumer>\n        );\n    }\n\n    public reposition() {\n        if (this.popover != null) {\n            this.popover.reposition();\n        }\n    }\n\n    // any descendant ContextMenu2s may update this ctxState\n    private renderPopover = (ctxState: Tooltip2ContextState) => {\n        const { children, disabled, intent, popoverClassName, ...restProps } = this.props;\n        const classes = classNames(\n            Classes.TOOLTIP2,\n            { [CoreClasses.MINIMAL]: this.props.minimal },\n            CoreClasses.intentClass(intent),\n            popoverClassName,\n        );\n\n        return (\n            <Popover2\n                interactionKind={Popover2InteractionKind.HOVER_TARGET_ONLY}\n                modifiers={{\n                    arrow: {\n                        enabled: !this.props.minimal,\n                    },\n                    offset: {\n                        options: {\n                            offset: [0, TOOLTIP_ARROW_SVG_SIZE / 2],\n                        },\n                    },\n                }}\n                {...restProps}\n                autoFocus={false}\n                canEscapeKeyClose={false}\n                disabled={ctxState.forceDisabled ?? disabled}\n                enforceFocus={false}\n                lazy={true}\n                popoverClassName={classes}\n                portalContainer={this.props.portalContainer}\n                ref={ref => (this.popover = ref)}\n            >\n                {children}\n            </Popover2>\n        );\n    };\n}\n"]},"metadata":{},"sourceType":"module"}