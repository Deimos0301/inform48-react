{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\n\nvar ResizeSensor2 =\n/** @class */\nfunction (_super) {\n  __extends(ResizeSensor2, _super);\n\n  function ResizeSensor2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.targetRef = React.createRef();\n    _this.prevElement = undefined;\n    _this.observer = new ResizeObserver(function (entries) {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    });\n    return _this;\n  }\n\n  ResizeSensor2.prototype.render = function () {\n    var onlyChild = React.Children.only(this.props.children); // if we're provided a ref to the child already, we don't need to attach one ourselves\n\n    if (this.props.targetRef !== undefined) {\n      return onlyChild;\n    }\n\n    return React.cloneElement(onlyChild, {\n      ref: this.targetRef\n    });\n  };\n\n  ResizeSensor2.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n\n  ResizeSensor2.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n\n  ResizeSensor2.prototype.componentWillUnmount = function () {\n    this.observer.disconnect();\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n\n\n  ResizeSensor2.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!(this.targetRef.current instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n\n    if (this.targetRef.current === this.prevElement && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect(); // remember element reference for next time\n\n      this.prevElement = this.targetRef.current;\n    } // observer callback is invoked immediately when observing new elements\n\n\n    this.observer.observe(this.targetRef.current);\n\n    if (this.props.observeParents) {\n      var parent_1 = this.targetRef.current.parentElement;\n\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n\n  ResizeSensor2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".ResizeSensor2\");\n  return ResizeSensor2;\n}(AbstractPureComponent2);\n\nexport { ResizeSensor2 };","map":null,"metadata":{},"sourceType":"module"}