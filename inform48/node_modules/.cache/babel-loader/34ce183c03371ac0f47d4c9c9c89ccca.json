{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement) {\n  return placement.split(\"-\")[0];\n}\n/** Returns true if position is left or right. */\n\nexport function isVerticalPlacement(side) {\n  return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n/** Returns the opposite position. */\n\nexport function getOppositePlacement(side) {\n  switch (side) {\n    case \"top\":\n      return \"bottom\";\n\n    case \"left\":\n      return \"right\";\n\n    case \"bottom\":\n      return \"top\";\n\n    default:\n      return \"left\";\n  }\n}\n/** Returns the CSS alignment keyword corresponding to given placement. */\n\nexport function getAlignment(placement) {\n  var align = placement.split(\"-\")[1];\n\n  switch (align) {\n    case \"start\":\n      return \"left\";\n\n    case \"end\":\n      return \"right\";\n\n    default:\n      return \"center\";\n  }\n} // Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\n\nexport function getTransformOrigin(placement, arrowStyles) {\n  var basePlacement = getBasePlacement(placement);\n\n  if (arrowStyles === undefined) {\n    return isVerticalPlacement(basePlacement) ? \"\".concat(getOppositePlacement(basePlacement), \" \").concat(getAlignment(basePlacement)) : \"\".concat(getAlignment(basePlacement), \" \").concat(getOppositePlacement(basePlacement));\n  } else {\n    // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n    var arrowSizeShift = 30 / 2; // can use keyword for dimension without the arrow, to ease computation burden.\n    // move origin by half arrow's height to keep it centered.\n\n    return isVerticalPlacement(basePlacement) ? \"\".concat(getOppositePlacement(basePlacement), \" \").concat(parseInt(arrowStyles.top, 10) + arrowSizeShift, \"px\") : \"\".concat(parseInt(arrowStyles.left, 10) + arrowSizeShift, \"px \").concat(getOppositePlacement(basePlacement));\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA;AACA;;AAEA;AACA,OAAM,SAAUA,gBAAV,CAA2BC,SAA3B,EAA+C;EACjD,OAAOA,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACH;AAED;;AACA,OAAM,SAAUC,mBAAV,CAA8BC,IAA9B,EAAiD;EACnD,OAAO,CAAC,MAAD,EAAS,OAAT,EAAkBC,OAAlB,CAA0BD,IAA1B,MAAoC,CAAC,CAA5C;AACH;AAED;;AACA,OAAM,SAAUE,oBAAV,CAA+BF,IAA/B,EAAkD;EACpD,QAAQA,IAAR;IACI,KAAK,KAAL;MACI,OAAO,QAAP;;IACJ,KAAK,MAAL;MACI,OAAO,OAAP;;IACJ,KAAK,QAAL;MACI,OAAO,KAAP;;IACJ;MACI,OAAO,MAAP;EARR;AAUH;AAED;;AACA,OAAM,SAAUG,YAAV,CAAuBN,SAAvB,EAA2C;EAC7C,IAAMO,KAAK,GAAGP,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAd;;EACA,QAAQM,KAAR;IACI,KAAK,OAAL;MACI,OAAO,MAAP;;IACJ,KAAK,KAAL;MACI,OAAO,OAAP;;IACJ;MACI,OAAO,QAAP;EANR;AAQH,C,CAED;AACA;;AAEA;;AACA,OAAM,SAAUC,kBAAV,CAA6BR,SAA7B,EAAmDS,WAAnD,EAAyG;EAC3G,IAAMC,aAAa,GAAGX,gBAAgB,CAACC,SAAD,CAAtC;;EACA,IAAIS,WAAW,KAAKE,SAApB,EAA+B;IAC3B,OAAOT,mBAAmB,CAACQ,aAAD,CAAnB,GACD,UAAGL,oBAAoB,CAACK,aAAD,CAAvB,EAAsC,GAAtC,EAAsCE,MAAtC,CAA0CN,YAAY,CAACI,aAAD,CAAtD,CADC,GAED,UAAGJ,YAAY,CAACI,aAAD,CAAf,EAA8B,GAA9B,EAA8BE,MAA9B,CAAkCP,oBAAoB,CAACK,aAAD,CAAtD,CAFN;EAGH,CAJD,MAIO;IACH;IACA,IAAMG,cAAc,GAAG,KAAK,CAA5B,CAFG,CAGH;IACA;;IACA,OAAOX,mBAAmB,CAACQ,aAAD,CAAnB,GACD,UAAGL,oBAAoB,CAACK,aAAD,CAAvB,EAAsC,GAAtC,EAAsCE,MAAtC,CAA0CE,QAAQ,CAACL,WAAW,CAACM,GAAb,EAAkB,EAAlB,CAAR,GAAgCF,cAA1E,EAAwF,IAAxF,CADC,GAED,UAAGC,QAAQ,CAACL,WAAW,CAACO,IAAb,EAAmB,EAAnB,CAAR,GAAiCH,cAApC,EAAkD,KAAlD,EAAkDD,MAAlD,CAAwDP,oBAAoB,CAACK,aAAD,CAA5E,CAFN;EAGH;AACJ","names":["getBasePlacement","placement","split","isVerticalPlacement","side","indexOf","getOppositePlacement","getAlignment","align","getTransformOrigin","arrowStyles","basePlacement","undefined","concat","arrowSizeShift","parseInt","top","left"],"sources":["/home/administrator/Рабочий стол/inform48-react/inform48/node_modules/@blueprintjs/popover2/src/utils.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BasePlacement, Placement } from \"@popperjs/core\";\n\n// Popper placement utils\n// ======================\n\n/** Converts a full placement to one of the four positions by stripping text after the `-`. */\nexport function getBasePlacement(placement: Placement) {\n    return placement.split(\"-\")[0] as BasePlacement;\n}\n\n/** Returns true if position is left or right. */\nexport function isVerticalPlacement(side: BasePlacement) {\n    return [\"left\", \"right\"].indexOf(side) !== -1;\n}\n\n/** Returns the opposite position. */\nexport function getOppositePlacement(side: BasePlacement) {\n    switch (side) {\n        case \"top\":\n            return \"bottom\";\n        case \"left\":\n            return \"right\";\n        case \"bottom\":\n            return \"top\";\n        default:\n            return \"left\";\n    }\n}\n\n/** Returns the CSS alignment keyword corresponding to given placement. */\nexport function getAlignment(placement: Placement) {\n    const align = placement.split(\"-\")[1] as \"start\" | \"end\" | undefined;\n    switch (align) {\n        case \"start\":\n            return \"left\";\n        case \"end\":\n            return \"right\";\n        default:\n            return \"center\";\n    }\n}\n\n// Popper modifiers\n// ================\n\n/** Modifier helper function to compute popper transform-origin based on arrow position */\nexport function getTransformOrigin(placement: Placement, arrowStyles: { left: string; top: string } | undefined) {\n    const basePlacement = getBasePlacement(placement);\n    if (arrowStyles === undefined) {\n        return isVerticalPlacement(basePlacement)\n            ? `${getOppositePlacement(basePlacement)} ${getAlignment(basePlacement)}`\n            : `${getAlignment(basePlacement)} ${getOppositePlacement(basePlacement)}`;\n    } else {\n        // const arrowSizeShift = state.elements.arrow.clientHeight / 2;\n        const arrowSizeShift = 30 / 2;\n        // can use keyword for dimension without the arrow, to ease computation burden.\n        // move origin by half arrow's height to keep it centered.\n        return isVerticalPlacement(basePlacement)\n            ? `${getOppositePlacement(basePlacement)} ${parseInt(arrowStyles.top, 10) + arrowSizeShift}px`\n            : `${parseInt(arrowStyles.left, 10) + arrowSizeShift}px ${getOppositePlacement(basePlacement)}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}