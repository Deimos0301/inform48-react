{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX, Intent, Keys, Position, refHandler, removeNonHTMLProps, setRef, Utils } from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport { clampValue, getValueOrEmptyValue, isValidNumericKeyboardEvent, isValueNumeric, parseStringToStringNumber, sanitizeNumericInput, toLocaleString, toMaxPrecision } from \"./numericInputUtils\";\nvar IncrementDirection;\n\n(function (IncrementDirection) {\n  IncrementDirection[IncrementDirection[\"DOWN\"] = -1] = \"DOWN\";\n  IncrementDirection[IncrementDirection[\"UP\"] = 1] = \"UP\";\n})(IncrementDirection || (IncrementDirection = {}));\n\nvar NON_HTML_PROPS = [\"allowNumericCharactersOnly\", \"buttonPosition\", \"clampValueOnBlur\", \"className\", \"defaultValue\", \"majorStepSize\", \"minorStepSize\", \"onButtonClick\", \"onValueChange\", \"selectAllOnFocus\", \"selectAllOnIncrement\", \"stepSize\"];\n\nvar NumericInput =\n/** @class */\nfunction (_super) {\n  __extends(NumericInput, _super);\n\n  function NumericInput() {\n    var _this = this;\n\n    var _a;\n\n    _this = _super.apply(this, arguments) || this;\n    _this.numericInputId = Utils.uniqueId(\"numericInput\");\n    _this.state = {\n      currentImeInputInvalid: false,\n      shouldSelectAfterUpdate: false,\n      stepMaxPrecision: NumericInput.getStepMaxPrecision(_this.props),\n      value: getValueOrEmptyValue((_a = _this.props.value) !== null && _a !== void 0 ? _a : _this.props.defaultValue)\n    }; // updating these flags need not trigger re-renders, so don't include them in this.state.\n\n    _this.didPasteEventJustOccur = false;\n    _this.delta = 0;\n    _this.inputElement = null;\n    _this.inputRef = refHandler(_this, \"inputElement\", _this.props.inputRef);\n    _this.incrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.UP);\n    _this.decrementButtonHandlers = _this.getButtonEventHandlers(IncrementDirection.DOWN);\n\n    _this.getCurrentValueAsNumber = function () {\n      return Number(parseStringToStringNumber(_this.state.value, _this.props.locale));\n    };\n\n    _this.handleButtonClick = function (e, direction) {\n      var _a, _b;\n\n      var delta = _this.updateDelta(direction, e);\n\n      var nextValue = _this.incrementValue(delta);\n\n      (_b = (_a = _this.props).onButtonClick) === null || _b === void 0 ? void 0 : _b.call(_a, Number(parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n    };\n\n    _this.stopContinuousChange = function () {\n      _this.delta = 0;\n\n      _this.clearTimeouts();\n\n      clearInterval(_this.intervalId);\n      document.removeEventListener(\"mouseup\", _this.stopContinuousChange);\n    };\n\n    _this.handleContinuousChange = function () {\n      var _a, _b, _c, _d; // If either min or max prop is set, when reaching the limit\n      // the button will be disabled and stopContinuousChange will be never fired,\n      // hence the need to check on each iteration to properly clear the timeout\n\n\n      if (_this.props.min !== undefined || _this.props.max !== undefined) {\n        var min = (_a = _this.props.min) !== null && _a !== void 0 ? _a : -Infinity;\n        var max = (_b = _this.props.max) !== null && _b !== void 0 ? _b : Infinity;\n\n        var valueAsNumber = _this.getCurrentValueAsNumber();\n\n        if (valueAsNumber <= min || valueAsNumber >= max) {\n          _this.stopContinuousChange();\n\n          return;\n        }\n      }\n\n      var nextValue = _this.incrementValue(_this.delta);\n\n      (_d = (_c = _this.props).onButtonClick) === null || _d === void 0 ? void 0 : _d.call(_c, Number(parseStringToStringNumber(nextValue, _this.props.locale)), nextValue);\n    }; // Callbacks - Input\n    // =================\n\n\n    _this.handleInputFocus = function (e) {\n      var _a, _b; // update this state flag to trigger update for input selection (see componentDidUpdate)\n\n\n      _this.setState({\n        shouldSelectAfterUpdate: _this.props.selectAllOnFocus\n      });\n\n      (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleInputBlur = function (e) {\n      var _a, _b; // always disable this flag on blur so it's ready for next time.\n\n\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n\n      if (_this.props.clampValueOnBlur) {\n        var value = e.target.value;\n\n        _this.handleNextValue(_this.roundAndClampValue(value));\n      }\n\n      (_b = (_a = _this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleInputKeyDown = function (e) {\n      var _a, _b;\n\n      if (_this.props.disabled || _this.props.readOnly) {\n        return;\n      } // eslint-disable-next-line deprecation/deprecation\n\n\n      var keyCode = e.keyCode;\n      var direction;\n\n      if (keyCode === Keys.ARROW_UP) {\n        direction = IncrementDirection.UP;\n      } else if (keyCode === Keys.ARROW_DOWN) {\n        direction = IncrementDirection.DOWN;\n      }\n\n      if (direction !== undefined) {\n        // when the input field has focus, some key combinations will modify\n        // the field's selection range. we'll actually want to select all\n        // text in the field after we modify the value on the following\n        // lines. preventing the default selection behavior lets us do that\n        // without interference.\n        e.preventDefault();\n\n        var delta = _this.updateDelta(direction, e);\n\n        _this.incrementValue(delta);\n      }\n\n      (_b = (_a = _this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleCompositionEnd = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        _this.handleNextValue(sanitizeNumericInput(e.data, _this.props.locale));\n\n        _this.setState({\n          currentImeInputInvalid: false\n        });\n      }\n    };\n\n    _this.handleCompositionUpdate = function (e) {\n      if (_this.props.allowNumericCharactersOnly) {\n        var data = e.data;\n        var sanitizedValue = sanitizeNumericInput(data, _this.props.locale);\n\n        if (sanitizedValue.length === 0 && data.length > 0) {\n          _this.setState({\n            currentImeInputInvalid: true\n          });\n        } else {\n          _this.setState({\n            currentImeInputInvalid: false\n          });\n        }\n      }\n    };\n\n    _this.handleInputKeyPress = function (e) {\n      var _a, _b; // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n      // e.key is not trustworthy in onKeyDown in all browsers.\n\n\n      if (_this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, _this.props.locale)) {\n        e.preventDefault();\n      }\n\n      (_b = (_a = _this.props).onKeyPress) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleInputPaste = function (e) {\n      var _a, _b;\n\n      _this.didPasteEventJustOccur = true;\n      (_b = (_a = _this.props).onPaste) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    };\n\n    _this.handleInputChange = function (e) {\n      var value = e.target.value;\n      var nextValue = value;\n\n      if (_this.props.allowNumericCharactersOnly && _this.didPasteEventJustOccur) {\n        _this.didPasteEventJustOccur = false;\n        nextValue = sanitizeNumericInput(value, _this.props.locale);\n      }\n\n      _this.handleNextValue(nextValue);\n\n      _this.setState({\n        shouldSelectAfterUpdate: false\n      });\n    };\n\n    return _this;\n  }\n\n  NumericInput.getDerivedStateFromProps = function (props, state) {\n    var _a, _b;\n\n    var nextState = {\n      prevMaxProp: props.max,\n      prevMinProp: props.min\n    };\n    var didMinChange = props.min !== state.prevMinProp;\n    var didMaxChange = props.max !== state.prevMaxProp;\n    var didBoundsChange = didMinChange || didMaxChange; // in controlled mode, use props.value\n    // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n\n    var value = (_b = (_a = props.value) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : state.value;\n    var stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n    var sanitizedValue = value !== NumericInput.VALUE_EMPTY ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale) : NumericInput.VALUE_EMPTY; // if a new min and max were provided that cause the existing value to fall\n    // outside of the new bounds, then clamp the value to the new valid range.\n\n    if (didBoundsChange && sanitizedValue !== state.value) {\n      return __assign(__assign({}, nextState), {\n        stepMaxPrecision: stepMaxPrecision,\n        value: sanitizedValue\n      });\n    }\n\n    return __assign(__assign({}, nextState), {\n      stepMaxPrecision: stepMaxPrecision,\n      value: value\n    });\n  }; // Value Helpers\n  // =============\n\n\n  NumericInput.getStepMaxPrecision = function (props) {\n    if (props.minorStepSize != null) {\n      return Utils.countDecimalPlaces(props.minorStepSize);\n    } else {\n      return Utils.countDecimalPlaces(props.stepSize);\n    }\n  };\n\n  NumericInput.roundAndClampValue = function (value, stepMaxPrecision, min, max, delta, locale) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n\n    if (!isValueNumeric(value, locale)) {\n      return NumericInput.VALUE_EMPTY;\n    }\n\n    var currentValue = parseStringToStringNumber(value, locale);\n    var nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n    var clampedValue = clampValue(nextValue, min, max);\n    return toLocaleString(clampedValue, locale);\n  };\n\n  NumericInput.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        buttonPosition = _b.buttonPosition,\n        className = _b.className,\n        fill = _b.fill,\n        large = _b.large;\n    var containerClasses = classNames(Classes.NUMERIC_INPUT, (_a = {}, _a[Classes.LARGE] = large, _a), className);\n    var buttons = this.renderButtons();\n    return React.createElement(ControlGroup, {\n      className: containerClasses,\n      fill: fill\n    }, buttonPosition === Position.LEFT && buttons, this.renderInput(), buttonPosition === Position.RIGHT && buttons);\n  };\n\n  NumericInput.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _a, _b, _c;\n\n    _super.prototype.componentDidUpdate.call(this, prevProps, prevState);\n\n    if (prevProps.inputRef !== this.props.inputRef) {\n      setRef(prevProps.inputRef, null);\n      this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n      setRef(this.props.inputRef, this.inputElement);\n    }\n\n    if (this.state.shouldSelectAfterUpdate) {\n      (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(0, this.state.value.length);\n    }\n\n    var didMinChange = this.props.min !== prevProps.min;\n    var didMaxChange = this.props.max !== prevProps.max;\n    var didBoundsChange = didMinChange || didMaxChange;\n    var didLocaleChange = this.props.locale !== prevProps.locale;\n    var didValueChange = this.state.value !== prevState.value;\n\n    if (didBoundsChange && didValueChange || didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY) {\n      // we clamped the value due to a bounds change, so we should fire the change callback\n      var valueToParse = didLocaleChange ? prevState.value : this.state.value;\n      var valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n      var localizedValue = toLocaleString(+valueAsString, this.props.locale);\n      (_c = (_b = this.props).onValueChange) === null || _c === void 0 ? void 0 : _c.call(_b, +valueAsString, localizedValue, this.inputElement);\n    }\n  };\n\n  NumericInput.prototype.validateProps = function (nextProps) {\n    var majorStepSize = nextProps.majorStepSize,\n        max = nextProps.max,\n        min = nextProps.min,\n        minorStepSize = nextProps.minorStepSize,\n        stepSize = nextProps.stepSize,\n        value = nextProps.value;\n\n    if (min != null && max != null && min > max) {\n      console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n    }\n\n    if (stepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n    }\n\n    if (minorStepSize && minorStepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n    }\n\n    if (majorStepSize && majorStepSize <= 0) {\n      console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n    }\n\n    if (minorStepSize && minorStepSize > stepSize) {\n      console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n    }\n\n    if (majorStepSize && majorStepSize < stepSize) {\n      console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n    } // controlled mode\n\n\n    if (value != null) {\n      var stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n      var sanitizedValue = NumericInput.roundAndClampValue(value.toString(), stepMaxPrecision, min, max, 0, this.props.locale);\n      var valueDoesNotMatch = sanitizedValue !== value.toString();\n      var localizedValue = toLocaleString(Number(parseStringToStringNumber(value, this.props.locale)), this.props.locale);\n      var isNotLocalized = sanitizedValue !== localizedValue;\n\n      if (valueDoesNotMatch && isNotLocalized) {\n        console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n      }\n    }\n  }; // Render Helpers\n  // ==============\n\n\n  NumericInput.prototype.renderButtons = function () {\n    var _a = this.props,\n        intent = _a.intent,\n        max = _a.max,\n        min = _a.min,\n        locale = _a.locale;\n    var value = parseStringToStringNumber(this.state.value, locale);\n    var disabled = this.props.disabled || this.props.readOnly;\n    var isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n    var isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n    return React.createElement(ButtonGroup, {\n      className: Classes.FIXED,\n      key: \"button-group\",\n      vertical: true\n    }, React.createElement(Button, __assign({\n      \"aria-label\": \"increment\",\n      \"aria-controls\": this.numericInputId,\n      disabled: disabled || isIncrementDisabled,\n      icon: \"chevron-up\",\n      intent: intent\n    }, this.incrementButtonHandlers)), React.createElement(Button, __assign({\n      \"aria-label\": \"decrement\",\n      \"aria-controls\": this.numericInputId,\n      disabled: disabled || isDecrementDisabled,\n      icon: \"chevron-down\",\n      intent: intent\n    }, this.decrementButtonHandlers)));\n  };\n\n  NumericInput.prototype.renderInput = function () {\n    var inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n    var valueAsNumber = this.getCurrentValueAsNumber();\n    return React.createElement(InputGroup, __assign({\n      asyncControl: this.props.asyncControl,\n      autoComplete: \"off\",\n      id: this.numericInputId,\n      role: this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined\n    }, inputGroupHtmlProps, {\n      \"aria-valuemax\": this.props.max,\n      \"aria-valuemin\": this.props.min,\n      \"aria-valuenow\": valueAsNumber,\n      intent: this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent,\n      inputRef: this.inputRef,\n      large: this.props.large,\n      leftElement: this.props.leftElement,\n      leftIcon: this.props.leftIcon,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur,\n      onChange: this.handleInputChange,\n      onCompositionEnd: this.handleCompositionEnd,\n      onCompositionUpdate: this.handleCompositionUpdate,\n      onKeyDown: this.handleInputKeyDown,\n      onKeyPress: this.handleInputKeyPress,\n      onPaste: this.handleInputPaste,\n      rightElement: this.props.rightElement,\n      value: this.state.value\n    }));\n  }; // Callbacks - Buttons\n  // ===================\n\n\n  NumericInput.prototype.getButtonEventHandlers = function (direction) {\n    var _this = this;\n\n    return {\n      // keydown is fired repeatedly when held so it's implicitly continuous\n      onKeyDown: function (evt) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (!_this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n          _this.handleButtonClick(evt, direction);\n        }\n      },\n      onMouseDown: function (evt) {\n        if (!_this.props.disabled) {\n          _this.handleButtonClick(evt, direction);\n\n          _this.startContinuousChange();\n        }\n      }\n    };\n  };\n\n  NumericInput.prototype.startContinuousChange = function () {\n    var _this = this; // The button's onMouseUp event handler doesn't fire if the user\n    // releases outside of the button, so we need to watch all the way\n    // from the top.\n\n\n    document.addEventListener(\"mouseup\", this.stopContinuousChange); // Initial delay is slightly longer to prevent the user from\n    // accidentally triggering the continuous increment/decrement.\n\n    this.setTimeout(function () {\n      _this.intervalId = window.setInterval(_this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n    }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n  }; // Data logic\n  // ==========\n\n\n  NumericInput.prototype.handleNextValue = function (valueAsString) {\n    var _a, _b;\n\n    if (this.props.value == null) {\n      this.setState({\n        value: valueAsString\n      });\n    }\n\n    (_b = (_a = this.props).onValueChange) === null || _b === void 0 ? void 0 : _b.call(_a, Number(parseStringToStringNumber(valueAsString, this.props.locale)), valueAsString, this.inputElement);\n  };\n\n  NumericInput.prototype.incrementValue = function (delta) {\n    // pretend we're incrementing from 0 if currValue is empty\n    var currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n    var nextValue = this.roundAndClampValue(currValue, delta);\n\n    if (nextValue !== this.state.value) {\n      this.handleNextValue(nextValue);\n      this.setState({\n        shouldSelectAfterUpdate: this.props.selectAllOnIncrement\n      });\n    } // return value used in continuous change updates\n\n\n    return nextValue;\n  };\n\n  NumericInput.prototype.getIncrementDelta = function (direction, isShiftKeyPressed, isAltKeyPressed) {\n    var _a = this.props,\n        majorStepSize = _a.majorStepSize,\n        minorStepSize = _a.minorStepSize,\n        stepSize = _a.stepSize;\n\n    if (isShiftKeyPressed && majorStepSize != null) {\n      return direction * majorStepSize;\n    } else if (isAltKeyPressed && minorStepSize != null) {\n      return direction * minorStepSize;\n    } else {\n      return direction * stepSize;\n    }\n  };\n\n  NumericInput.prototype.roundAndClampValue = function (value, delta) {\n    if (delta === void 0) {\n      delta = 0;\n    }\n\n    return NumericInput.roundAndClampValue(value, this.state.stepMaxPrecision, this.props.min, this.props.max, delta, this.props.locale);\n  };\n\n  NumericInput.prototype.updateDelta = function (direction, e) {\n    this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n    return this.delta;\n  };\n\n  NumericInput.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".NumericInput\");\n  NumericInput.VALUE_EMPTY = \"\";\n  NumericInput.VALUE_ZERO = \"0\";\n  NumericInput.defaultProps = {\n    allowNumericCharactersOnly: true,\n    buttonPosition: Position.RIGHT,\n    clampValueOnBlur: false,\n    defaultValue: NumericInput.VALUE_EMPTY,\n    large: false,\n    majorStepSize: 10,\n    minorStepSize: 0.1,\n    selectAllOnFocus: false,\n    selectAllOnIncrement: false,\n    stepSize: 1\n  };\n  NumericInput.CONTINUOUS_CHANGE_DELAY = 300;\n  NumericInput.CONTINUOUS_CHANGE_INTERVAL = 100;\n  return NumericInput;\n}(AbstractPureComponent2);\n\nexport { NumericInput };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SACIC,sBADJ,EAEIC,OAFJ,EAGIC,kBAHJ,EAKIC,MALJ,EAOIC,IAPJ,EAQIC,QARJ,EASIC,UATJ,EAUIC,kBAVJ,EAWIC,MAXJ,EAYIC,KAZJ,QAaO,cAbP;AAcA,OAAO,KAAKC,MAAZ,MAAwB,qBAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SACIC,UADJ,EAEIC,oBAFJ,EAGIC,2BAHJ,EAIIC,cAJJ,EAKIC,yBALJ,EAMIC,oBANJ,EAOIC,cAPJ,EAQIC,cARJ,QASO,qBATP;AAwIA,IAAKC,kBAAL;;AAAA,WAAKA,kBAAL,EAAuB;EACnBA;EACAA;AACH,CAHD,EAAKA,kBAAkB,KAAlBA,kBAAkB,MAAvB;;AAKA,IAAMC,cAAc,GAAmC,CACnD,4BADmD,EAEnD,gBAFmD,EAGnD,kBAHmD,EAInD,WAJmD,EAKnD,cALmD,EAMnD,eANmD,EAOnD,eAPmD,EAQnD,eARmD,EASnD,eATmD,EAUnD,kBAVmD,EAWnD,sBAXmD,EAYnD,UAZmD,CAAvD;;AAiBA;AAAA;AAAA;EAAkCC;;EAAlC;IAAA;;;;;IAOYC,uBAAiBjB,KAAK,CAACkB,QAAN,CAAe,cAAf,CAAjB;IA0EDD,cAA4B;MAC/BE,sBAAsB,EAAE,KADO;MAE/BC,uBAAuB,EAAE,KAFM;MAG/BC,gBAAgB,EAAEC,YAAY,CAACC,mBAAb,CAAiCN,KAAI,CAACO,KAAtC,CAHa;MAI/BC,KAAK,EAAElB,oBAAoB,CAAC,WAAI,CAACiB,KAAL,CAAWC,KAAX,MAAgB,IAAhB,IAAgBC,aAAhB,GAAgBA,EAAhB,GAAoBT,KAAI,CAACO,KAAL,CAAWG,YAAhC;IAJI,CAA5B,CAjFX,CAwFI;;IACQV,+BAAyB,KAAzB;IAEAA,cAAQ,CAAR;IAEDA,qBAAwC,IAAxC;IAECA,iBAAmCpB,UAAU,CAACoB,KAAD,EAAO,cAAP,EAAuBA,KAAI,CAACO,KAAL,CAAWI,QAAlC,CAA7C;IAIAX,gCAA0BA,KAAI,CAACY,sBAAL,CAA4Bf,kBAAkB,CAACgB,EAA/C,CAA1B;IAEAb,gCAA0BA,KAAI,CAACY,sBAAL,CAA4Bf,kBAAkB,CAACiB,IAA/C,CAA1B;;IAEAd,gCAA0B;MAAM,aAAM,CAACP,yBAAyB,CAACO,KAAI,CAACe,KAAL,CAAWP,KAAZ,EAAmBR,KAAI,CAACO,KAAL,CAAWS,MAA9B,CAA1B,CAAN;IAAsE,CAAtG;;IA+KAhB,0BAAoB,UAACiB,CAAD,EAA4CC,SAA5C,EAAyE;;;MACjG,IAAMC,KAAK,GAAGnB,KAAI,CAACoB,WAAL,CAAiBF,SAAjB,EAA4BD,CAA5B,CAAd;;MACA,IAAMI,SAAS,GAAGrB,KAAI,CAACsB,cAAL,CAAoBH,KAApB,CAAlB;;MACA,iBAAI,CAACZ,KAAL,EAAWgB,aAAX,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,YAAGC,MAAM,CAAChC,yBAAyB,CAAC4B,SAAD,EAAYrB,KAAI,CAACO,KAAL,CAAWS,MAAvB,CAA1B,CAAT,EAAoEK,SAApE,CAAxB;IACH,CAJO;;IAmBArB,6BAAuB;MAC3BA,KAAI,CAACmB,KAAL,GAAa,CAAb;;MACAnB,KAAI,CAAC0B,aAAL;;MACAC,aAAa,CAAC3B,KAAI,CAAC4B,UAAN,CAAb;MACAC,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwC9B,KAAI,CAAC+B,oBAA7C;IACH,CALO;;IAOA/B,+BAAyB;yBAAA,CAC7B;MACA;MACA;;;MACA,IAAIA,KAAI,CAACO,KAAL,CAAWyB,GAAX,KAAmBC,SAAnB,IAAgCjC,KAAI,CAACO,KAAL,CAAW2B,GAAX,KAAmBD,SAAvD,EAAkE;QAC9D,IAAMD,GAAG,GAAG,WAAI,CAACzB,KAAL,CAAWyB,GAAX,MAAc,IAAd,IAAcvB,aAAd,GAAcA,EAAd,GAAkB,CAAC0B,QAA/B;QACA,IAAMD,GAAG,GAAG,WAAI,CAAC3B,KAAL,CAAW2B,GAAX,MAAc,IAAd,IAAcV,aAAd,GAAcA,EAAd,GAAkBW,QAA9B;;QACA,IAAMC,aAAa,GAAGpC,KAAI,CAACqC,uBAAL,EAAtB;;QACA,IAAID,aAAa,IAAIJ,GAAjB,IAAwBI,aAAa,IAAIF,GAA7C,EAAkD;UAC9ClC,KAAI,CAAC+B,oBAAL;;UACA;QACH;MACJ;;MACD,IAAMV,SAAS,GAAGrB,KAAI,CAACsB,cAAL,CAAoBtB,KAAI,CAACmB,KAAzB,CAAlB;;MACA,iBAAI,CAACZ,KAAL,EAAWgB,aAAX,MAAwB,IAAxB,IAAwBe,aAAxB,GAAwB,MAAxB,GAAwBA,YAAGb,MAAM,CAAChC,yBAAyB,CAAC4B,SAAD,EAAYrB,KAAI,CAACO,KAAL,CAAWS,MAAvB,CAA1B,CAAT,EAAoEK,SAApE,CAAxB;IACH,CAfO,CAhTZ,CAiUI;IACA;;;IAEQrB,yBAAmB,UAACiB,CAAD,EAAsC;iBAAA,CAC7D;;;MACAjB,KAAI,CAACuC,QAAL,CAAc;QAAEpC,uBAAuB,EAAEH,KAAI,CAACO,KAAL,CAAWiC;MAAtC,CAAd;;MACA,iBAAI,CAACjC,KAAL,EAAWkC,OAAX,MAAkB,IAAlB,IAAkBjB,aAAlB,GAAkB,MAAlB,GAAkBA,YAAGP,CAAH,CAAlB;IACH,CAJO;;IAMAjB,wBAAkB,UAACiB,CAAD,EAAsC;iBAAA,CAC5D;;;MACAjB,KAAI,CAACuC,QAAL,CAAc;QAAEpC,uBAAuB,EAAE;MAA3B,CAAd;;MAEA,IAAIH,KAAI,CAACO,KAAL,CAAWmC,gBAAf,EAAiC;QACrB,SAAK,GAAKzB,CAAC,CAAC0B,MAAF,CAA4BnC,KAAtC;;QACRR,KAAI,CAAC4C,eAAL,CAAqB5C,KAAI,CAAC6C,kBAAL,CAAwBrC,KAAxB,CAArB;MACH;;MAED,iBAAI,CAACD,KAAL,EAAWuC,MAAX,MAAiB,IAAjB,IAAiBtB,aAAjB,GAAiB,MAAjB,GAAiBA,YAAGP,CAAH,CAAjB;IACH,CAVO;;IAYAjB,2BAAqB,UAACiB,CAAD,EAAyC;;;MAClE,IAAIjB,KAAI,CAACO,KAAL,CAAWwC,QAAX,IAAuB/C,KAAI,CAACO,KAAL,CAAWyC,QAAtC,EAAgD;QAC5C;MACH,CAHiE,CAKlE;;;MACQ,WAAO,GAAK/B,CAAC,QAAb;MAER,IAAIC,SAAJ;;MAEA,IAAI+B,OAAO,KAAKvE,IAAI,CAACwE,QAArB,EAA+B;QAC3BhC,SAAS,GAAGrB,kBAAkB,CAACgB,EAA/B;MACH,CAFD,MAEO,IAAIoC,OAAO,KAAKvE,IAAI,CAACyE,UAArB,EAAiC;QACpCjC,SAAS,GAAGrB,kBAAkB,CAACiB,IAA/B;MACH;;MAED,IAAII,SAAS,KAAKe,SAAlB,EAA6B;QACzB;QACA;QACA;QACA;QACA;QACAhB,CAAC,CAACmC,cAAF;;QAEA,IAAMjC,KAAK,GAAGnB,KAAI,CAACoB,WAAL,CAAiBF,SAAjB,EAA4BD,CAA5B,CAAd;;QACAjB,KAAI,CAACsB,cAAL,CAAoBH,KAApB;MACH;;MAED,iBAAI,CAACZ,KAAL,EAAW8C,SAAX,MAAoB,IAApB,IAAoB7B,aAApB,GAAoB,MAApB,GAAoBA,YAAGP,CAAH,CAApB;IACH,CA7BO;;IA+BAjB,6BAAuB,UAACiB,CAAD,EAA4C;MACvE,IAAIjB,KAAI,CAACO,KAAL,CAAW+C,0BAAf,EAA2C;QACvCtD,KAAI,CAAC4C,eAAL,CAAqBlD,oBAAoB,CAACuB,CAAC,CAACsC,IAAH,EAASvD,KAAI,CAACO,KAAL,CAAWS,MAApB,CAAzC;;QACAhB,KAAI,CAACuC,QAAL,CAAc;UAAErC,sBAAsB,EAAE;QAA1B,CAAd;MACH;IACJ,CALO;;IAOAF,gCAA0B,UAACiB,CAAD,EAA4C;MAC1E,IAAIjB,KAAI,CAACO,KAAL,CAAW+C,0BAAf,EAA2C;QAC/B,QAAI,GAAKrC,CAAC,KAAV;QACR,IAAMuC,cAAc,GAAG9D,oBAAoB,CAAC6D,IAAD,EAAOvD,KAAI,CAACO,KAAL,CAAWS,MAAlB,CAA3C;;QACA,IAAIwC,cAAc,CAACC,MAAf,KAA0B,CAA1B,IAA+BF,IAAI,CAACE,MAAL,GAAc,CAAjD,EAAoD;UAChDzD,KAAI,CAACuC,QAAL,CAAc;YAAErC,sBAAsB,EAAE;UAA1B,CAAd;QACH,CAFD,MAEO;UACHF,KAAI,CAACuC,QAAL,CAAc;YAAErC,sBAAsB,EAAE;UAA1B,CAAd;QACH;MACJ;IACJ,CAVO;;IAYAF,4BAAsB,UAACiB,CAAD,EAAyC;iBAAA,CACnE;MACA;;;MACA,IAAIjB,KAAI,CAACO,KAAL,CAAW+C,0BAAX,IAAyC,CAAC/D,2BAA2B,CAAC0B,CAAD,EAAIjB,KAAI,CAACO,KAAL,CAAWS,MAAf,CAAzE,EAAiG;QAC7FC,CAAC,CAACmC,cAAF;MACH;;MAED,iBAAI,CAAC7C,KAAL,EAAWmD,UAAX,MAAqB,IAArB,IAAqBlC,aAArB,GAAqB,MAArB,GAAqBA,YAAGP,CAAH,CAArB;IACH,CARO;;IAUAjB,yBAAmB,UAACiB,CAAD,EAA0C;;;MACjEjB,KAAI,CAAC2D,sBAAL,GAA8B,IAA9B;MACA,iBAAI,CAACpD,KAAL,EAAWqD,OAAX,MAAkB,IAAlB,IAAkBpC,aAAlB,GAAkB,MAAlB,GAAkBA,YAAGP,CAAH,CAAlB;IACH,CAHO;;IAKAjB,0BAAoB,UAACiB,CAAD,EAAmB;MACnC,SAAK,GAAKA,CAAC,CAAC0B,MAAF,CAA4BnC,KAAtC;MACR,IAAIa,SAAS,GAAGb,KAAhB;;MACA,IAAIR,KAAI,CAACO,KAAL,CAAW+C,0BAAX,IAAyCtD,KAAI,CAAC2D,sBAAlD,EAA0E;QACtE3D,KAAI,CAAC2D,sBAAL,GAA8B,KAA9B;QACAtC,SAAS,GAAG3B,oBAAoB,CAACc,KAAD,EAAQR,KAAI,CAACO,KAAL,CAAWS,MAAnB,CAAhC;MACH;;MAEDhB,KAAI,CAAC4C,eAAL,CAAqBvB,SAArB;;MACArB,KAAI,CAACuC,QAAL,CAAc;QAAEpC,uBAAuB,EAAE;MAA3B,CAAd;IACH,CAVO;;;EAoEX;;EArciBE,wCAAd,UAAuCE,KAAvC,EAAiEQ,KAAjE,EAA0F;;;IACtF,IAAM8C,SAAS,GAAG;MACdC,WAAW,EAAEvD,KAAK,CAAC2B,GADL;MAEd6B,WAAW,EAAExD,KAAK,CAACyB;IAFL,CAAlB;IAKA,IAAMgC,YAAY,GAAGzD,KAAK,CAACyB,GAAN,KAAcjB,KAAK,CAACgD,WAAzC;IACA,IAAME,YAAY,GAAG1D,KAAK,CAAC2B,GAAN,KAAcnB,KAAK,CAAC+C,WAAzC;IACA,IAAMI,eAAe,GAAGF,YAAY,IAAIC,YAAxC,CARsF,CAUtF;IACA;;IACA,IAAMzD,KAAK,GAAG,iBAAK,CAACA,KAAN,MAAW,IAAX,IAAWC,aAAX,GAAW,MAAX,GAAWA,GAAE0D,QAAF,EAAX,MAAuB,IAAvB,IAAuB3C,aAAvB,GAAuBA,EAAvB,GAA2BT,KAAK,CAACP,KAA/C;IACA,IAAMJ,gBAAgB,GAAGC,YAAY,CAACC,mBAAb,CAAiCC,KAAjC,CAAzB;IAEA,IAAMiD,cAAc,GAChBhD,KAAK,KAAKH,YAAY,CAAC+D,WAAvB,GACM/D,YAAY,CAACwC,kBAAb,CAAgCrC,KAAhC,EAAuCJ,gBAAvC,EAAyDG,KAAK,CAACyB,GAA/D,EAAoEzB,KAAK,CAAC2B,GAA1E,EAA+E,CAA/E,EAAkF3B,KAAK,CAACS,MAAxF,CADN,GAEMX,YAAY,CAAC+D,WAHvB,CAfsF,CAoBtF;IACA;;IACA,IAAIF,eAAe,IAAIV,cAAc,KAAKzC,KAAK,CAACP,KAAhD,EAAuD;MACnD,6BAAYqD,SAAZ,GAAqB;QAAEzD,gBAAgB,kBAAlB;QAAoBI,KAAK,EAAEgD;MAA3B,CAArB;IACH;;IACD,6BAAYK,SAAZ,GAAqB;MAAEzD,gBAAgB,kBAAlB;MAAoBI,KAAK;IAAzB,CAArB;EACH,CA1Ba,CAtBlB,CAsDI;EACA;;;EACeH,mCAAf,UAAmCE,KAAnC,EAA4E;IACxE,IAAIA,KAAK,CAAC8D,aAAN,IAAuB,IAA3B,EAAiC;MAC7B,OAAOtF,KAAK,CAACuF,kBAAN,CAAyB/D,KAAK,CAAC8D,aAA/B,CAAP;IACH,CAFD,MAEO;MACH,OAAOtF,KAAK,CAACuF,kBAAN,CAAyB/D,KAAK,CAACgE,QAA/B,CAAP;IACH;EACJ,CANc;;EAQAlE,kCAAf,UACIG,KADJ,EAEIJ,gBAFJ,EAGI4B,GAHJ,EAIIE,GAJJ,EAKIf,KALJ,EAMIH,MANJ,EAM8B;IAD1B;MAAAG;IAAS;;IAGT,IAAI,CAAC3B,cAAc,CAACgB,KAAD,EAAQQ,MAAR,CAAnB,EAAoC;MAChC,OAAOX,YAAY,CAAC+D,WAApB;IACH;;IACD,IAAMI,YAAY,GAAG/E,yBAAyB,CAACe,KAAD,EAAQQ,MAAR,CAA9C;IACA,IAAMK,SAAS,GAAGzB,cAAc,CAAC6B,MAAM,CAAC+C,YAAD,CAAN,GAAuBrD,KAAxB,EAA+Bf,gBAA/B,CAAhC;IACA,IAAMqE,YAAY,GAAGpF,UAAU,CAACgC,SAAD,EAAYW,GAAZ,EAAiBE,GAAjB,CAA/B;IACA,OAAOvC,cAAc,CAAC8E,YAAD,EAAezD,MAAf,CAArB;EACH,CAfc;;EAyCRX,gCAAP;;;IACU,SAA6C,KAAKE,KAAlD;IAAA,IAAEmE,cAAc,oBAAhB;IAAA,IAAkBC,SAAS,eAA3B;IAAA,IAA6BC,IAAI,UAAjC;IAAA,IAAmCC,KAAK,WAAxC;IACN,IAAMC,gBAAgB,GAAG1G,UAAU,CAACG,OAAO,CAACwG,aAAT,GAAsBtE,SAAIA,GAAClC,OAAO,CAACyG,KAAT,IAAiBH,KAArB,EAA0BpE,EAAhD,GAAoDkE,SAApD,CAAnC;IACA,IAAMM,OAAO,GAAG,KAAKC,aAAL,EAAhB;IACA,OACI7G,oBAACc,YAAD,EAAa;MAACwF,SAAS,EAAEG,gBAAZ;MAA8BF,IAAI,EAAEA;IAApC,CAAb,EACKF,cAAc,KAAK/F,QAAQ,CAACwG,IAA5B,IAAoCF,OADzC,EAEK,KAAKG,WAAL,EAFL,EAGKV,cAAc,KAAK/F,QAAQ,CAAC0G,KAA5B,IAAqCJ,OAH1C,CADJ;EAOH,CAXM;;EAaA5E,4CAAP,UAA0BiF,SAA1B,EAAwDC,SAAxD,EAAqF;;;IACjFC,iBAAMC,kBAAN,CAAwBC,IAAxB,CAAwB,IAAxB,EAAyBJ,SAAzB,EAAoCC,SAApC;;IAEA,IAAID,SAAS,CAAC3E,QAAV,KAAuB,KAAKJ,KAAL,CAAWI,QAAtC,EAAgD;MAC5C7B,MAAM,CAACwG,SAAS,CAAC3E,QAAX,EAAqB,IAArB,CAAN;MACA,KAAKA,QAAL,GAAgB/B,UAAU,CAAC,IAAD,EAAO,cAAP,EAAuB,KAAK2B,KAAL,CAAWI,QAAlC,CAA1B;MACA7B,MAAM,CAAC,KAAKyB,KAAL,CAAWI,QAAZ,EAAsB,KAAKgF,YAA3B,CAAN;IACH;;IAED,IAAI,KAAK5E,KAAL,CAAWZ,uBAAf,EAAwC;MACpC,WAAKwF,YAAL,MAAiB,IAAjB,IAAiBlF,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEmF,iBAAF,CAAoB,CAApB,EAAuB,KAAK7E,KAAL,CAAWP,KAAX,CAAiBiD,MAAxC,CAAjB;IACH;;IAED,IAAMO,YAAY,GAAG,KAAKzD,KAAL,CAAWyB,GAAX,KAAmBsD,SAAS,CAACtD,GAAlD;IACA,IAAMiC,YAAY,GAAG,KAAK1D,KAAL,CAAW2B,GAAX,KAAmBoD,SAAS,CAACpD,GAAlD;IACA,IAAMgC,eAAe,GAAGF,YAAY,IAAIC,YAAxC;IACA,IAAM4B,eAAe,GAAG,KAAKtF,KAAL,CAAWS,MAAX,KAAsBsE,SAAS,CAACtE,MAAxD;IACA,IAAM8E,cAAc,GAAG,KAAK/E,KAAL,CAAWP,KAAX,KAAqB+E,SAAS,CAAC/E,KAAtD;;IAEA,IAAK0D,eAAe,IAAI4B,cAApB,IAAwCD,eAAe,IAAIN,SAAS,CAAC/E,KAAV,KAAoBH,YAAY,CAAC+D,WAAhG,EAA8G;MAC1G;MACA,IAAM2B,YAAY,GAAGF,eAAe,GAAGN,SAAS,CAAC/E,KAAb,GAAqB,KAAKO,KAAL,CAAWP,KAApE;MACA,IAAMwF,aAAa,GAAGvG,yBAAyB,CAACsG,YAAD,EAAeT,SAAS,CAACtE,MAAzB,CAA/C;MACA,IAAMiF,cAAc,GAAGtG,cAAc,CAAC,CAACqG,aAAF,EAAiB,KAAKzF,KAAL,CAAWS,MAA5B,CAArC;MAEA,iBAAKT,KAAL,EAAW2F,aAAX,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,YAAG,CAACH,aAAJ,EAAmBC,cAAnB,EAAmC,KAAKN,YAAxC,CAAxB;IACH;EACJ,CA3BM;;EA6BGtF,uCAAV,UAAwB+F,SAAxB,EAAqE;IACzD,iBAAa,GAA+CA,SAAS,cAArE;IAAA,IAAelE,GAAG,GAA0CkE,SAAS,IAArE;IAAA,IAAoBpE,GAAG,GAAqCoE,SAAS,IAArE;IAAA,IAAyB/B,aAAa,GAAsB+B,SAAS,cAArE;IAAA,IAAwC7B,QAAQ,GAAY6B,SAAS,SAArE;IAAA,IAAkD5F,KAAK,GAAK4F,SAAS,MAArE;;IACR,IAAIpE,GAAG,IAAI,IAAP,IAAeE,GAAG,IAAI,IAAtB,IAA8BF,GAAG,GAAGE,GAAxC,EAA6C;MACzCmE,OAAO,CAACC,KAAR,CAActH,MAAM,CAACuH,qBAArB;IACH;;IACD,IAAIhC,QAAS,IAAI,CAAjB,EAAoB;MAChB8B,OAAO,CAACC,KAAR,CAActH,MAAM,CAACwH,oCAArB;IACH;;IACD,IAAInC,aAAa,IAAIA,aAAa,IAAI,CAAtC,EAAyC;MACrCgC,OAAO,CAACC,KAAR,CAActH,MAAM,CAACyH,0CAArB;IACH;;IACD,IAAIC,aAAa,IAAIA,aAAa,IAAI,CAAtC,EAAyC;MACrCL,OAAO,CAACC,KAAR,CAActH,MAAM,CAAC2H,0CAArB;IACH;;IACD,IAAItC,aAAa,IAAIA,aAAa,GAAGE,QAArC,EAAgD;MAC5C8B,OAAO,CAACC,KAAR,CAActH,MAAM,CAAC4H,mCAArB;IACH;;IACD,IAAIF,aAAa,IAAIA,aAAa,GAAGnC,QAArC,EAAgD;MAC5C8B,OAAO,CAACC,KAAR,CAActH,MAAM,CAAC6H,mCAArB;IACH,CAnBgE,CAqBjE;;;IACA,IAAIrG,KAAK,IAAI,IAAb,EAAmB;MACf,IAAMJ,gBAAgB,GAAGC,YAAY,CAACC,mBAAb,CAAiC8F,SAAjC,CAAzB;MACA,IAAM5C,cAAc,GAAGnD,YAAY,CAACwC,kBAAb,CACnBrC,KAAK,CAAC2D,QAAN,EADmB,EAEnB/D,gBAFmB,EAGnB4B,GAHmB,EAInBE,GAJmB,EAKnB,CALmB,EAMnB,KAAK3B,KAAL,CAAWS,MANQ,CAAvB;MAQA,IAAM8F,iBAAiB,GAAGtD,cAAc,KAAKhD,KAAK,CAAC2D,QAAN,EAA7C;MACA,IAAM8B,cAAc,GAAGtG,cAAc,CACjC8B,MAAM,CAAChC,yBAAyB,CAACe,KAAD,EAAQ,KAAKD,KAAL,CAAWS,MAAnB,CAA1B,CAD2B,EAEjC,KAAKT,KAAL,CAAWS,MAFsB,CAArC;MAIA,IAAM+F,cAAc,GAAGvD,cAAc,KAAKyC,cAA1C;;MAEA,IAAIa,iBAAiB,IAAIC,cAAzB,EAAyC;QACrCV,OAAO,CAACW,IAAR,CAAahI,MAAM,CAACiI,sCAApB;MACH;IACJ;EACJ,CA3CS,CAnJd,CAgMI;EACA;;;EAEQ5G,uCAAR;IACU,SAA+B,KAAKE,KAApC;IAAA,IAAE2G,MAAM,YAAR;IAAA,IAAUhF,GAAG,SAAb;IAAA,IAAeF,GAAG,SAAlB;IAAA,IAAoBhB,MAAM,YAA1B;IACN,IAAMR,KAAK,GAAGf,yBAAyB,CAAC,KAAKsB,KAAL,CAAWP,KAAZ,EAAmBQ,MAAnB,CAAvC;IACA,IAAM+B,QAAQ,GAAG,KAAKxC,KAAL,CAAWwC,QAAX,IAAuB,KAAKxC,KAAL,CAAWyC,QAAnD;IACA,IAAMmE,mBAAmB,GAAGjF,GAAG,KAAKD,SAAR,IAAqBzB,KAAK,KAAK,EAA/B,IAAqC,CAACA,KAAD,IAAU0B,GAA3E;IACA,IAAMkF,mBAAmB,GAAGpF,GAAG,KAAKC,SAAR,IAAqBzB,KAAK,KAAK,EAA/B,IAAqC,CAACA,KAAD,IAAUwB,GAA3E;IAEA,OACI3D,oBAACY,WAAD,EAAY;MAAC0F,SAAS,EAAEpG,OAAO,CAAC8I,KAApB;MAA2BC,GAAG,EAAC,cAA/B;MAA8CC,QAAQ,EAAE;IAAxD,CAAZ,EACIlJ,oBAACa,MAAD,EAAOsI;MAAA,cACQ,WADR;MACmB,iBACP,KAAKC,cAFjB;MAGH1E,QAAQ,EAAEA,QAAQ,IAAIoE,mBAHnB;MAIHO,IAAI,EAAC,YAJF;MAKHR,MAAM,EAAEA;IALL,GAMC,KAAKS,uBANN,CAAP,CADJ,EASItJ,oBAACa,MAAD,EAAOsI;MAAA,cACQ,WADR;MACmB,iBACP,KAAKC,cAFjB;MAGH1E,QAAQ,EAAEA,QAAQ,IAAIqE,mBAHnB;MAIHM,IAAI,EAAC,cAJF;MAKHR,MAAM,EAAEA;IALL,GAMC,KAAKU,uBANN,CAAP,CATJ,CADJ;EAoBH,CA3BO;;EA6BAvH,qCAAR;IACI,IAAMwH,mBAAmB,GAAGhJ,kBAAkB,CAAC,KAAK0B,KAAN,EAAaT,cAAb,EAA6B,IAA7B,CAA9C;IACA,IAAMsC,aAAa,GAAG,KAAKC,uBAAL,EAAtB;IAEA,OACIhE,oBAACe,UAAD,EAAWoI;MACPM,YAAY,EAAE,KAAKvH,KAAL,CAAWuH,YADlB;MAEPC,YAAY,EAAC,KAFN;MAGPC,EAAE,EAAE,KAAKP,cAHF;MAIPQ,IAAI,EAAE,KAAK1H,KAAL,CAAW+C,0BAAX,GAAwC,YAAxC,GAAuDrB;IAJtD,GAKH4F,mBALG,EAKgB;MAAA,iBACR,KAAKtH,KAAL,CAAW2B,GADH;MACM,iBACd,KAAK3B,KAAL,CAAWyB,GAFH;MAEM,iBACdI,aAHQ;MAIvB8E,MAAM,EAAE,KAAKnG,KAAL,CAAWb,sBAAX,GAAoCzB,MAAM,CAACyJ,MAA3C,GAAoD,KAAK3H,KAAL,CAAW2G,MAJhD;MAKvBvG,QAAQ,EAAE,KAAKA,QALQ;MAMvBkE,KAAK,EAAE,KAAKtE,KAAL,CAAWsE,KANK;MAOvBsD,WAAW,EAAE,KAAK5H,KAAL,CAAW4H,WAPD;MAQvBC,QAAQ,EAAE,KAAK7H,KAAL,CAAW6H,QARE;MASvB3F,OAAO,EAAE,KAAK4F,gBATS;MAUvBvF,MAAM,EAAE,KAAKwF,eAVU;MAWvBC,QAAQ,EAAE,KAAKC,iBAXQ;MAYvBC,gBAAgB,EAAE,KAAKC,oBAZA;MAavBC,mBAAmB,EAAE,KAAKC,uBAbH;MAcvBvF,SAAS,EAAE,KAAKwF,kBAdO;MAevBnF,UAAU,EAAE,KAAKoF,mBAfM;MAgBvBlF,OAAO,EAAE,KAAKmF,gBAhBS;MAiBvBC,YAAY,EAAE,KAAKzI,KAAL,CAAWyI,YAjBF;MAkBvBxI,KAAK,EAAE,KAAKO,KAAL,CAAWP;IAlBK,CALhB,CAAX,CADJ;EA2BH,CA/BO,CAhOZ,CAiQI;EACA;;;EAEQH,gDAAR,UAA+Ba,SAA/B,EAA4D;IAA5D;;IACI,OAAO;MACH;MACAmC,SAAS,EAAE,eAAG;QACV;QACA,IAAI,CAACrD,KAAI,CAACO,KAAL,CAAWwC,QAAZ,IAAwBrE,IAAI,CAACuK,eAAL,CAAqBC,GAAG,CAACjG,OAAzB,CAA5B,EAA+D;UAC3DjD,KAAI,CAACmJ,iBAAL,CAAuBD,GAAvB,EAA4BhI,SAA5B;QACH;MACJ,CAPE;MAQHkI,WAAW,EAAE,eAAG;QACZ,IAAI,CAACpJ,KAAI,CAACO,KAAL,CAAWwC,QAAhB,EAA0B;UACtB/C,KAAI,CAACmJ,iBAAL,CAAuBD,GAAvB,EAA4BhI,SAA5B;;UACAlB,KAAI,CAACqJ,qBAAL;QACH;MACJ;IAbE,CAAP;EAeH,CAhBO;;EAwBAhJ,+CAAR;IAAA,kBACI;IACA;IACA;;;IACAwB,QAAQ,CAACyH,gBAAT,CAA0B,SAA1B,EAAqC,KAAKvH,oBAA1C,EAJJ,CAMI;IACA;;IACA,KAAKwH,UAAL,CAAgB;MACZvJ,KAAI,CAAC4B,UAAL,GAAkB4H,MAAM,CAACC,WAAP,CAAmBzJ,KAAI,CAAC0J,sBAAxB,EAAgDrJ,YAAY,CAACsJ,0BAA7D,CAAlB;IACH,CAFD,EAEGtJ,YAAY,CAACuJ,uBAFhB;EAGH,CAXO,CA5RZ,CAmaI;EACA;;;EAEQvJ,yCAAR,UAAwB2F,aAAxB,EAA6C;;;IACzC,IAAI,KAAKzF,KAAL,CAAWC,KAAX,IAAoB,IAAxB,EAA8B;MAC1B,KAAK+B,QAAL,CAAc;QAAE/B,KAAK,EAAEwF;MAAT,CAAd;IACH;;IAED,iBAAKzF,KAAL,EAAW2F,aAAX,MAAwB,IAAxB,IAAwB1E,aAAxB,GAAwB,MAAxB,GAAwBA,YACpBC,MAAM,CAAChC,yBAAyB,CAACuG,aAAD,EAAgB,KAAKzF,KAAL,CAAWS,MAA3B,CAA1B,CADc,EAEpBgF,aAFoB,EAGpB,KAAKL,YAHe,CAAxB;EAKH,CAVO;;EAYAtF,wCAAR,UAAuBc,KAAvB,EAAoC;IAChC;IACA,IAAM0I,SAAS,GAAG,KAAK9I,KAAL,CAAWP,KAAX,KAAqBH,YAAY,CAAC+D,WAAlC,GAAgD/D,YAAY,CAACyJ,UAA7D,GAA0E,KAAK/I,KAAL,CAAWP,KAAvG;IACA,IAAMa,SAAS,GAAG,KAAKwB,kBAAL,CAAwBgH,SAAxB,EAAmC1I,KAAnC,CAAlB;;IAEA,IAAIE,SAAS,KAAK,KAAKN,KAAL,CAAWP,KAA7B,EAAoC;MAChC,KAAKoC,eAAL,CAAqBvB,SAArB;MACA,KAAKkB,QAAL,CAAc;QAAEpC,uBAAuB,EAAE,KAAKI,KAAL,CAAWwJ;MAAtC,CAAd;IACH,CAR+B,CAUhC;;;IACA,OAAO1I,SAAP;EACH,CAZO;;EAcAhB,2CAAR,UAA0Ba,SAA1B,EAAyD8I,iBAAzD,EAAqFC,eAArF,EAA6G;IACnG,SAA6C,KAAK1J,KAAlD;IAAA,IAAEmG,aAAa,mBAAf;IAAA,IAAiBrC,aAAa,mBAA9B;IAAA,IAAgCE,QAAQ,cAAxC;;IAEN,IAAIyF,iBAAiB,IAAItD,aAAa,IAAI,IAA1C,EAAgD;MAC5C,OAAOxF,SAAS,GAAGwF,aAAnB;IACH,CAFD,MAEO,IAAIuD,eAAe,IAAI5F,aAAa,IAAI,IAAxC,EAA8C;MACjD,OAAOnD,SAAS,GAAGmD,aAAnB;IACH,CAFM,MAEA;MACH,OAAOnD,SAAS,GAAGqD,QAAnB;IACH;EACJ,CAVO;;EAYAlE,4CAAR,UAA2BG,KAA3B,EAA0CW,KAA1C,EAAmD;IAAT;MAAAA;IAAS;;IAC/C,OAAOd,YAAY,CAACwC,kBAAb,CACHrC,KADG,EAEH,KAAKO,KAAL,CAAWX,gBAFR,EAGH,KAAKG,KAAL,CAAWyB,GAHR,EAIH,KAAKzB,KAAL,CAAW2B,GAJR,EAKHf,KALG,EAMH,KAAKZ,KAAL,CAAWS,MANR,CAAP;EAQH,CATO;;EAWAX,qCAAR,UAAoBa,SAApB,EAAmDD,CAAnD,EAA4F;IACxF,KAAKE,KAAL,GAAa,KAAK+I,iBAAL,CAAuBhJ,SAAvB,EAAkCD,CAAC,CAACkJ,QAApC,EAA8ClJ,CAAC,CAACmJ,MAAhD,CAAb;IACA,OAAO,KAAKjJ,KAAZ;EACH,CAHO;;EAtdMd,2BAAc,UAAG7B,kBAAH,EAAqB,eAArB,CAAd;EAEA6B,2BAAc,EAAd;EAEAA,0BAAa,GAAb;EAIAA,4BAAkC;IAC5CiD,0BAA0B,EAAE,IADgB;IAE5CoB,cAAc,EAAE/F,QAAQ,CAAC0G,KAFmB;IAG5C3C,gBAAgB,EAAE,KAH0B;IAI5ChC,YAAY,EAAEL,YAAY,CAAC+D,WAJiB;IAK5CS,KAAK,EAAE,KALqC;IAM5C6B,aAAa,EAAE,EAN6B;IAO5CrC,aAAa,EAAE,GAP6B;IAQ5C7B,gBAAgB,EAAE,KAR0B;IAS5CuH,oBAAoB,EAAE,KATsB;IAU5CxF,QAAQ,EAAE;EAVkC,CAAlC;EAyCClE,uCAA0B,GAA1B;EAEAA,0CAA6B,GAA7B;EAuanB;AAAC,CA3dD,CAAkC/B,sBAAlC;;SAAa+B","names":["classNames","React","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","Intent","Keys","Position","refHandler","removeNonHTMLProps","setRef","Utils","Errors","ButtonGroup","Button","ControlGroup","InputGroup","clampValue","getValueOrEmptyValue","isValidNumericKeyboardEvent","isValueNumeric","parseStringToStringNumber","sanitizeNumericInput","toLocaleString","toMaxPrecision","IncrementDirection","NON_HTML_PROPS","__extends","_this","uniqueId","currentImeInputInvalid","shouldSelectAfterUpdate","stepMaxPrecision","NumericInput","getStepMaxPrecision","props","value","_a","defaultValue","inputRef","getButtonEventHandlers","UP","DOWN","state","locale","e","direction","delta","updateDelta","nextValue","incrementValue","onButtonClick","_b","Number","clearTimeouts","clearInterval","intervalId","document","removeEventListener","stopContinuousChange","min","undefined","max","Infinity","valueAsNumber","getCurrentValueAsNumber","_d","setState","selectAllOnFocus","onFocus","clampValueOnBlur","target","handleNextValue","roundAndClampValue","onBlur","disabled","readOnly","keyCode","ARROW_UP","ARROW_DOWN","preventDefault","onKeyDown","allowNumericCharactersOnly","data","sanitizedValue","length","onKeyPress","didPasteEventJustOccur","onPaste","nextState","prevMaxProp","prevMinProp","didMinChange","didMaxChange","didBoundsChange","toString","VALUE_EMPTY","minorStepSize","countDecimalPlaces","stepSize","currentValue","clampedValue","buttonPosition","className","fill","large","containerClasses","NUMERIC_INPUT","LARGE","buttons","renderButtons","LEFT","renderInput","RIGHT","prevProps","prevState","_super","componentDidUpdate","call","inputElement","setSelectionRange","didLocaleChange","didValueChange","valueToParse","valueAsString","localizedValue","onValueChange","_c","nextProps","console","error","NUMERIC_INPUT_MIN_MAX","NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE","majorStepSize","NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE","NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND","NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND","valueDoesNotMatch","isNotLocalized","warn","NUMERIC_INPUT_CONTROLLED_VALUE_INVALID","intent","isIncrementDisabled","isDecrementDisabled","FIXED","key","vertical","__assign","numericInputId","icon","incrementButtonHandlers","decrementButtonHandlers","inputGroupHtmlProps","asyncControl","autoComplete","id","role","DANGER","leftElement","leftIcon","handleInputFocus","handleInputBlur","onChange","handleInputChange","onCompositionEnd","handleCompositionEnd","onCompositionUpdate","handleCompositionUpdate","handleInputKeyDown","handleInputKeyPress","handleInputPaste","rightElement","isKeyboardClick","evt","handleButtonClick","onMouseDown","startContinuousChange","addEventListener","setTimeout","window","setInterval","handleContinuousChange","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","currValue","VALUE_ZERO","selectAllOnIncrement","isShiftKeyPressed","isAltKeyPressed","getIncrementDelta","shiftKey","altKey"],"sources":["/home/administrator/Рабочий стол/inform48-react/inform48/node_modules/@blueprintjs/core/src/components/forms/numericInput.tsx"],"sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    Classes,\n    DISPLAYNAME_PREFIX,\n    HTMLInputProps,\n    Intent,\n    IRef,\n    Keys,\n    Position,\n    refHandler,\n    removeNonHTMLProps,\n    setRef,\n    Utils,\n} from \"../../common\";\nimport * as Errors from \"../../common/errors\";\nimport { ButtonGroup } from \"../button/buttonGroup\";\nimport { Button } from \"../button/buttons\";\nimport { ControlGroup } from \"./controlGroup\";\nimport { InputGroup } from \"./inputGroup\";\nimport type { InputSharedProps } from \"./inputSharedProps\";\nimport {\n    clampValue,\n    getValueOrEmptyValue,\n    isValidNumericKeyboardEvent,\n    isValueNumeric,\n    parseStringToStringNumber,\n    sanitizeNumericInput,\n    toLocaleString,\n    toMaxPrecision,\n} from \"./numericInputUtils\";\n\n// eslint-disable-next-line deprecation/deprecation\nexport type NumericInputProps = INumericInputProps;\n/** @deprecated use NumericInputProps */\nexport interface INumericInputProps extends InputSharedProps {\n    /**\n     * Whether to allow only floating-point number characters in the field,\n     * mimicking the native `input[type=\"number\"]`.\n     *\n     * @default true\n     */\n    allowNumericCharactersOnly?: boolean;\n\n    /**\n     * Set this to `true` if you will be controlling the `value` of this input with asynchronous updates.\n     * These may occur if you do not immediately call setState in a parent component with the value from\n     * the `onChange` handler.\n     */\n    asyncControl?: boolean;\n\n    /**\n     * The position of the buttons with respect to the input field.\n     *\n     * @default Position.RIGHT\n     */\n    buttonPosition?: typeof Position.LEFT | typeof Position.RIGHT | \"none\";\n\n    /**\n     * Whether the value should be clamped to `[min, max]` on blur.\n     * The value will be clamped to each bound only if the bound is defined.\n     * Note that native `input[type=\"number\"]` controls do *NOT* clamp on blur.\n     *\n     * @default false\n     */\n    clampValueOnBlur?: boolean;\n\n    /**\n     * In uncontrolled mode, this sets the default value of the input.\n     * Note that this value is only used upon component instantiation and changes to this prop\n     * during the component lifecycle will be ignored.\n     *\n     * @default \"\"\n     */\n    defaultValue?: number | string;\n\n    /**\n     * If set to `true`, the input will display with larger styling.\n     * This is equivalent to setting `Classes.LARGE` via className on the\n     * parent control group and on the child input group.\n     *\n     * @default false\n     */\n    large?: boolean;\n\n    /**\n     * The locale name, which is passed to the component to format the number and allowing to type the number in the specific locale.\n     * [See MDN documentation for more info about browser locale identification](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @default \"\"\n     */\n    locale?: string;\n\n    /**\n     * The increment between successive values when <kbd>shift</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 10\n     */\n    majorStepSize?: number | null;\n\n    /** The maximum value of the input. */\n    max?: number;\n\n    /** The minimum value of the input. */\n    min?: number;\n\n    /**\n     * The increment between successive values when <kbd>alt</kbd> is held.\n     * Pass explicit `null` value to disable this interaction.\n     *\n     * @default 0.1\n     */\n    minorStepSize?: number | null;\n\n    /**\n     * Whether the entire text field should be selected on focus.\n     *\n     * @default false\n     */\n    selectAllOnFocus?: boolean;\n\n    /**\n     * Whether the entire text field should be selected on increment.\n     *\n     * @default false\n     */\n    selectAllOnIncrement?: boolean;\n\n    /**\n     * The increment between successive values when no modifier keys are held.\n     *\n     * @default 1\n     */\n    stepSize?: number;\n\n    /**\n     * The value to display in the input field.\n     */\n    value?: number | string;\n\n    /** The callback invoked when the value changes due to a button click. */\n    onButtonClick?(valueAsNumber: number, valueAsString: string): void;\n\n    /** The callback invoked when the value changes due to typing, arrow keys, or button clicks. */\n    onValueChange?(valueAsNumber: number, valueAsString: string, inputElement: HTMLInputElement | null): void;\n}\n\nexport interface INumericInputState {\n    currentImeInputInvalid: boolean;\n    prevMinProp?: number;\n    prevMaxProp?: number;\n    shouldSelectAfterUpdate: boolean;\n    stepMaxPrecision: number;\n    value: string;\n}\n\nenum IncrementDirection {\n    DOWN = -1,\n    UP = +1,\n}\n\nconst NON_HTML_PROPS: Array<keyof NumericInputProps> = [\n    \"allowNumericCharactersOnly\",\n    \"buttonPosition\",\n    \"clampValueOnBlur\",\n    \"className\",\n    \"defaultValue\",\n    \"majorStepSize\",\n    \"minorStepSize\",\n    \"onButtonClick\",\n    \"onValueChange\",\n    \"selectAllOnFocus\",\n    \"selectAllOnIncrement\",\n    \"stepSize\",\n];\n\ntype ButtonEventHandlers = Required<Pick<React.HTMLAttributes<Element>, \"onKeyDown\" | \"onMouseDown\">>;\n\nexport class NumericInput extends AbstractPureComponent2<HTMLInputProps & NumericInputProps, INumericInputState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.NumericInput`;\n\n    public static VALUE_EMPTY = \"\";\n\n    public static VALUE_ZERO = \"0\";\n\n    private numericInputId = Utils.uniqueId(\"numericInput\");\n\n    public static defaultProps: NumericInputProps = {\n        allowNumericCharactersOnly: true,\n        buttonPosition: Position.RIGHT,\n        clampValueOnBlur: false,\n        defaultValue: NumericInput.VALUE_EMPTY,\n        large: false,\n        majorStepSize: 10,\n        minorStepSize: 0.1,\n        selectAllOnFocus: false,\n        selectAllOnIncrement: false,\n        stepSize: 1,\n    };\n\n    public static getDerivedStateFromProps(props: NumericInputProps, state: INumericInputState) {\n        const nextState = {\n            prevMaxProp: props.max,\n            prevMinProp: props.min,\n        };\n\n        const didMinChange = props.min !== state.prevMinProp;\n        const didMaxChange = props.max !== state.prevMaxProp;\n        const didBoundsChange = didMinChange || didMaxChange;\n\n        // in controlled mode, use props.value\n        // in uncontrolled mode, if state.value has not been assigned yet (upon initial mount), use props.defaultValue\n        const value = props.value?.toString() ?? state.value;\n        const stepMaxPrecision = NumericInput.getStepMaxPrecision(props);\n\n        const sanitizedValue =\n            value !== NumericInput.VALUE_EMPTY\n                ? NumericInput.roundAndClampValue(value, stepMaxPrecision, props.min, props.max, 0, props.locale)\n                : NumericInput.VALUE_EMPTY;\n\n        // if a new min and max were provided that cause the existing value to fall\n        // outside of the new bounds, then clamp the value to the new valid range.\n        if (didBoundsChange && sanitizedValue !== state.value) {\n            return { ...nextState, stepMaxPrecision, value: sanitizedValue };\n        }\n        return { ...nextState, stepMaxPrecision, value };\n    }\n\n    private static CONTINUOUS_CHANGE_DELAY = 300;\n\n    private static CONTINUOUS_CHANGE_INTERVAL = 100;\n\n    // Value Helpers\n    // =============\n    private static getStepMaxPrecision(props: HTMLInputProps & NumericInputProps) {\n        if (props.minorStepSize != null) {\n            return Utils.countDecimalPlaces(props.minorStepSize);\n        } else {\n            return Utils.countDecimalPlaces(props.stepSize!);\n        }\n    }\n\n    private static roundAndClampValue(\n        value: string,\n        stepMaxPrecision: number,\n        min: number | undefined,\n        max: number | undefined,\n        delta = 0,\n        locale: string | undefined,\n    ) {\n        if (!isValueNumeric(value, locale)) {\n            return NumericInput.VALUE_EMPTY;\n        }\n        const currentValue = parseStringToStringNumber(value, locale);\n        const nextValue = toMaxPrecision(Number(currentValue) + delta, stepMaxPrecision);\n        const clampedValue = clampValue(nextValue, min, max);\n        return toLocaleString(clampedValue, locale);\n    }\n\n    public state: INumericInputState = {\n        currentImeInputInvalid: false,\n        shouldSelectAfterUpdate: false,\n        stepMaxPrecision: NumericInput.getStepMaxPrecision(this.props),\n        value: getValueOrEmptyValue(this.props.value ?? this.props.defaultValue),\n    };\n\n    // updating these flags need not trigger re-renders, so don't include them in this.state.\n    private didPasteEventJustOccur = false;\n\n    private delta = 0;\n\n    public inputElement: HTMLInputElement | null = null;\n\n    private inputRef: IRef<HTMLInputElement> = refHandler(this, \"inputElement\", this.props.inputRef);\n\n    private intervalId?: number;\n\n    private incrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.UP);\n\n    private decrementButtonHandlers = this.getButtonEventHandlers(IncrementDirection.DOWN);\n\n    private getCurrentValueAsNumber = () => Number(parseStringToStringNumber(this.state.value, this.props.locale));\n\n    public render() {\n        const { buttonPosition, className, fill, large } = this.props;\n        const containerClasses = classNames(Classes.NUMERIC_INPUT, { [Classes.LARGE]: large }, className);\n        const buttons = this.renderButtons();\n        return (\n            <ControlGroup className={containerClasses} fill={fill}>\n                {buttonPosition === Position.LEFT && buttons}\n                {this.renderInput()}\n                {buttonPosition === Position.RIGHT && buttons}\n            </ControlGroup>\n        );\n    }\n\n    public componentDidUpdate(prevProps: NumericInputProps, prevState: INumericInputState) {\n        super.componentDidUpdate(prevProps, prevState);\n\n        if (prevProps.inputRef !== this.props.inputRef) {\n            setRef(prevProps.inputRef, null);\n            this.inputRef = refHandler(this, \"inputElement\", this.props.inputRef);\n            setRef(this.props.inputRef, this.inputElement);\n        }\n\n        if (this.state.shouldSelectAfterUpdate) {\n            this.inputElement?.setSelectionRange(0, this.state.value.length);\n        }\n\n        const didMinChange = this.props.min !== prevProps.min;\n        const didMaxChange = this.props.max !== prevProps.max;\n        const didBoundsChange = didMinChange || didMaxChange;\n        const didLocaleChange = this.props.locale !== prevProps.locale;\n        const didValueChange = this.state.value !== prevState.value;\n\n        if ((didBoundsChange && didValueChange) || (didLocaleChange && prevState.value !== NumericInput.VALUE_EMPTY)) {\n            // we clamped the value due to a bounds change, so we should fire the change callback\n            const valueToParse = didLocaleChange ? prevState.value : this.state.value;\n            const valueAsString = parseStringToStringNumber(valueToParse, prevProps.locale);\n            const localizedValue = toLocaleString(+valueAsString, this.props.locale);\n\n            this.props.onValueChange?.(+valueAsString, localizedValue, this.inputElement);\n        }\n    }\n\n    protected validateProps(nextProps: HTMLInputProps & NumericInputProps) {\n        const { majorStepSize, max, min, minorStepSize, stepSize, value } = nextProps;\n        if (min != null && max != null && min > max) {\n            console.error(Errors.NUMERIC_INPUT_MIN_MAX);\n        }\n        if (stepSize! <= 0) {\n            console.error(Errors.NUMERIC_INPUT_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (majorStepSize && majorStepSize <= 0) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_NON_POSITIVE);\n        }\n        if (minorStepSize && minorStepSize > stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MINOR_STEP_SIZE_BOUND);\n        }\n        if (majorStepSize && majorStepSize < stepSize!) {\n            console.error(Errors.NUMERIC_INPUT_MAJOR_STEP_SIZE_BOUND);\n        }\n\n        // controlled mode\n        if (value != null) {\n            const stepMaxPrecision = NumericInput.getStepMaxPrecision(nextProps);\n            const sanitizedValue = NumericInput.roundAndClampValue(\n                value.toString(),\n                stepMaxPrecision,\n                min,\n                max,\n                0,\n                this.props.locale,\n            );\n            const valueDoesNotMatch = sanitizedValue !== value.toString();\n            const localizedValue = toLocaleString(\n                Number(parseStringToStringNumber(value, this.props.locale)),\n                this.props.locale,\n            );\n            const isNotLocalized = sanitizedValue !== localizedValue;\n\n            if (valueDoesNotMatch && isNotLocalized) {\n                console.warn(Errors.NUMERIC_INPUT_CONTROLLED_VALUE_INVALID);\n            }\n        }\n    }\n\n    // Render Helpers\n    // ==============\n\n    private renderButtons() {\n        const { intent, max, min, locale } = this.props;\n        const value = parseStringToStringNumber(this.state.value, locale);\n        const disabled = this.props.disabled || this.props.readOnly;\n        const isIncrementDisabled = max !== undefined && value !== \"\" && +value >= max;\n        const isDecrementDisabled = min !== undefined && value !== \"\" && +value <= min;\n\n        return (\n            <ButtonGroup className={Classes.FIXED} key=\"button-group\" vertical={true}>\n                <Button\n                    aria-label=\"increment\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isIncrementDisabled}\n                    icon=\"chevron-up\"\n                    intent={intent}\n                    {...this.incrementButtonHandlers}\n                />\n                <Button\n                    aria-label=\"decrement\"\n                    aria-controls={this.numericInputId}\n                    disabled={disabled || isDecrementDisabled}\n                    icon=\"chevron-down\"\n                    intent={intent}\n                    {...this.decrementButtonHandlers}\n                />\n            </ButtonGroup>\n        );\n    }\n\n    private renderInput() {\n        const inputGroupHtmlProps = removeNonHTMLProps(this.props, NON_HTML_PROPS, true);\n        const valueAsNumber = this.getCurrentValueAsNumber();\n\n        return (\n            <InputGroup\n                asyncControl={this.props.asyncControl}\n                autoComplete=\"off\"\n                id={this.numericInputId}\n                role={this.props.allowNumericCharactersOnly ? \"spinbutton\" : undefined}\n                {...inputGroupHtmlProps}\n                aria-valuemax={this.props.max}\n                aria-valuemin={this.props.min}\n                aria-valuenow={valueAsNumber}\n                intent={this.state.currentImeInputInvalid ? Intent.DANGER : this.props.intent}\n                inputRef={this.inputRef}\n                large={this.props.large}\n                leftElement={this.props.leftElement}\n                leftIcon={this.props.leftIcon}\n                onFocus={this.handleInputFocus}\n                onBlur={this.handleInputBlur}\n                onChange={this.handleInputChange}\n                onCompositionEnd={this.handleCompositionEnd}\n                onCompositionUpdate={this.handleCompositionUpdate}\n                onKeyDown={this.handleInputKeyDown}\n                onKeyPress={this.handleInputKeyPress}\n                onPaste={this.handleInputPaste}\n                rightElement={this.props.rightElement}\n                value={this.state.value}\n            />\n        );\n    }\n\n    // Callbacks - Buttons\n    // ===================\n\n    private getButtonEventHandlers(direction: IncrementDirection): ButtonEventHandlers {\n        return {\n            // keydown is fired repeatedly when held so it's implicitly continuous\n            onKeyDown: evt => {\n                // eslint-disable-next-line deprecation/deprecation\n                if (!this.props.disabled && Keys.isKeyboardClick(evt.keyCode)) {\n                    this.handleButtonClick(evt, direction);\n                }\n            },\n            onMouseDown: evt => {\n                if (!this.props.disabled) {\n                    this.handleButtonClick(evt, direction);\n                    this.startContinuousChange();\n                }\n            },\n        };\n    }\n\n    private handleButtonClick = (e: React.MouseEvent | React.KeyboardEvent, direction: IncrementDirection) => {\n        const delta = this.updateDelta(direction, e);\n        const nextValue = this.incrementValue(delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    private startContinuousChange() {\n        // The button's onMouseUp event handler doesn't fire if the user\n        // releases outside of the button, so we need to watch all the way\n        // from the top.\n        document.addEventListener(\"mouseup\", this.stopContinuousChange);\n\n        // Initial delay is slightly longer to prevent the user from\n        // accidentally triggering the continuous increment/decrement.\n        this.setTimeout(() => {\n            this.intervalId = window.setInterval(this.handleContinuousChange, NumericInput.CONTINUOUS_CHANGE_INTERVAL);\n        }, NumericInput.CONTINUOUS_CHANGE_DELAY);\n    }\n\n    private stopContinuousChange = () => {\n        this.delta = 0;\n        this.clearTimeouts();\n        clearInterval(this.intervalId);\n        document.removeEventListener(\"mouseup\", this.stopContinuousChange);\n    };\n\n    private handleContinuousChange = () => {\n        // If either min or max prop is set, when reaching the limit\n        // the button will be disabled and stopContinuousChange will be never fired,\n        // hence the need to check on each iteration to properly clear the timeout\n        if (this.props.min !== undefined || this.props.max !== undefined) {\n            const min = this.props.min ?? -Infinity;\n            const max = this.props.max ?? Infinity;\n            const valueAsNumber = this.getCurrentValueAsNumber();\n            if (valueAsNumber <= min || valueAsNumber >= max) {\n                this.stopContinuousChange();\n                return;\n            }\n        }\n        const nextValue = this.incrementValue(this.delta);\n        this.props.onButtonClick?.(Number(parseStringToStringNumber(nextValue, this.props.locale)), nextValue);\n    };\n\n    // Callbacks - Input\n    // =================\n\n    private handleInputFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        // update this state flag to trigger update for input selection (see componentDidUpdate)\n        this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnFocus! });\n        this.props.onFocus?.(e);\n    };\n\n    private handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n        // always disable this flag on blur so it's ready for next time.\n        this.setState({ shouldSelectAfterUpdate: false });\n\n        if (this.props.clampValueOnBlur) {\n            const { value } = e.target as HTMLInputElement;\n            this.handleNextValue(this.roundAndClampValue(value));\n        }\n\n        this.props.onBlur?.(e);\n    };\n\n    private handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (this.props.disabled || this.props.readOnly) {\n            return;\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode } = e;\n\n        let direction: IncrementDirection | undefined;\n\n        if (keyCode === Keys.ARROW_UP) {\n            direction = IncrementDirection.UP;\n        } else if (keyCode === Keys.ARROW_DOWN) {\n            direction = IncrementDirection.DOWN;\n        }\n\n        if (direction !== undefined) {\n            // when the input field has focus, some key combinations will modify\n            // the field's selection range. we'll actually want to select all\n            // text in the field after we modify the value on the following\n            // lines. preventing the default selection behavior lets us do that\n            // without interference.\n            e.preventDefault();\n\n            const delta = this.updateDelta(direction, e);\n            this.incrementValue(delta);\n        }\n\n        this.props.onKeyDown?.(e);\n    };\n\n    private handleCompositionEnd = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            this.handleNextValue(sanitizeNumericInput(e.data, this.props.locale));\n            this.setState({ currentImeInputInvalid: false });\n        }\n    };\n\n    private handleCompositionUpdate = (e: React.CompositionEvent<HTMLInputElement>) => {\n        if (this.props.allowNumericCharactersOnly) {\n            const { data } = e;\n            const sanitizedValue = sanitizeNumericInput(data, this.props.locale);\n            if (sanitizedValue.length === 0 && data.length > 0) {\n                this.setState({ currentImeInputInvalid: true });\n            } else {\n                this.setState({ currentImeInputInvalid: false });\n            }\n        }\n    };\n\n    private handleInputKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        // we prohibit keystrokes in onKeyPress instead of onKeyDown, because\n        // e.key is not trustworthy in onKeyDown in all browsers.\n        if (this.props.allowNumericCharactersOnly && !isValidNumericKeyboardEvent(e, this.props.locale)) {\n            e.preventDefault();\n        }\n\n        this.props.onKeyPress?.(e);\n    };\n\n    private handleInputPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        this.didPasteEventJustOccur = true;\n        this.props.onPaste?.(e);\n    };\n\n    private handleInputChange = (e: React.FormEvent) => {\n        const { value } = e.target as HTMLInputElement;\n        let nextValue = value;\n        if (this.props.allowNumericCharactersOnly && this.didPasteEventJustOccur) {\n            this.didPasteEventJustOccur = false;\n            nextValue = sanitizeNumericInput(value, this.props.locale);\n        }\n\n        this.handleNextValue(nextValue);\n        this.setState({ shouldSelectAfterUpdate: false });\n    };\n\n    // Data logic\n    // ==========\n\n    private handleNextValue(valueAsString: string) {\n        if (this.props.value == null) {\n            this.setState({ value: valueAsString });\n        }\n\n        this.props.onValueChange?.(\n            Number(parseStringToStringNumber(valueAsString, this.props.locale)),\n            valueAsString,\n            this.inputElement,\n        );\n    }\n\n    private incrementValue(delta: number) {\n        // pretend we're incrementing from 0 if currValue is empty\n        const currValue = this.state.value === NumericInput.VALUE_EMPTY ? NumericInput.VALUE_ZERO : this.state.value;\n        const nextValue = this.roundAndClampValue(currValue, delta);\n\n        if (nextValue !== this.state.value) {\n            this.handleNextValue(nextValue);\n            this.setState({ shouldSelectAfterUpdate: this.props.selectAllOnIncrement! });\n        }\n\n        // return value used in continuous change updates\n        return nextValue;\n    }\n\n    private getIncrementDelta(direction: IncrementDirection, isShiftKeyPressed: boolean, isAltKeyPressed: boolean) {\n        const { majorStepSize, minorStepSize, stepSize } = this.props;\n\n        if (isShiftKeyPressed && majorStepSize != null) {\n            return direction * majorStepSize;\n        } else if (isAltKeyPressed && minorStepSize != null) {\n            return direction * minorStepSize;\n        } else {\n            return direction * stepSize!;\n        }\n    }\n\n    private roundAndClampValue(value: string, delta = 0) {\n        return NumericInput.roundAndClampValue(\n            value,\n            this.state.stepMaxPrecision,\n            this.props.min,\n            this.props.max,\n            delta,\n            this.props.locale,\n        );\n    }\n\n    private updateDelta(direction: IncrementDirection, e: React.MouseEvent | React.KeyboardEvent) {\n        this.delta = this.getIncrementDelta(direction, e.shiftKey, e.altKey);\n        return this.delta;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}