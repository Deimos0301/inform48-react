{"ast":null,"code":"/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes as CoreClasses, DISPLAYNAME_PREFIX, Icon, Menu, Text } from \"@blueprintjs/core\";\nimport * as Classes from \"./classes\";\nimport { Popover2 } from \"./popover2\";\n\nvar MenuItem2 =\n/** @class */\nfunction (_super) {\n  __extends(MenuItem2, _super);\n\n  function MenuItem2() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MenuItem2.prototype.render = function () {\n    var _a, _b;\n\n    var _c;\n\n    var _d = this.props,\n        active = _d.active,\n        className = _d.className,\n        children = _d.children,\n        disabled = _d.disabled,\n        intent = _d.intent,\n        labelClassName = _d.labelClassName,\n        labelElement = _d.labelElement,\n        multiline = _d.multiline,\n        popoverProps = _d.popoverProps,\n        _e = _d.roleStructure,\n        roleStructure = _e === void 0 ? \"menuitem\" : _e,\n        selected = _d.selected,\n        shouldDismissPopover = _d.shouldDismissPopover,\n        submenuProps = _d.submenuProps,\n        text = _d.text,\n        textClassName = _d.textClassName,\n        _f = _d.tagName,\n        tagName = _f === void 0 ? \"a\" : _f,\n        htmlTitle = _d.htmlTitle,\n        htmlProps = __rest(_d, [\"active\", \"className\", \"children\", \"disabled\", \"intent\", \"labelClassName\", \"labelElement\", \"multiline\", \"popoverProps\", \"roleStructure\", \"selected\", \"shouldDismissPopover\", \"submenuProps\", \"text\", \"textClassName\", \"tagName\", \"htmlTitle\"]);\n\n    var _g = roleStructure === \"listoption\" ? // \"listoption\": parent has listbox role, or is a <select>\n    [\"option\", undefined, (_c = this.props.icon) !== null && _c !== void 0 ? _c : selected === undefined ? undefined : selected ? \"small-tick\" : \"blank\", Boolean(selected) // aria-selected prop\n    ] : // \"menuitem\": parent has menu role\n    [\"none\", \"menuitem\", this.props.icon, undefined // don't set aria-selected prop\n    ],\n        liRole = _g[0],\n        targetRole = _g[1],\n        icon = _g[2],\n        ariaSelected = _g[3];\n\n    var hasIcon = icon != null;\n    var hasSubmenu = children != null;\n    var intentClass = CoreClasses.intentClass(intent);\n    var anchorClasses = classNames(CoreClasses.MENU_ITEM, intentClass, (_a = {}, _a[CoreClasses.ACTIVE] = active, _a[CoreClasses.DISABLED] = disabled, // prevent popover from closing when clicking on submenu trigger or disabled item\n    _a[Classes.POPOVER2_DISMISS] = shouldDismissPopover && !disabled && !hasSubmenu, _a[CoreClasses.SELECTED] = active && intentClass === undefined, _a), className);\n    var target = React.createElement(tagName, __assign(__assign(__assign({\n      role: targetRole,\n      tabIndex: 0\n    }, htmlProps), disabled ? DISABLED_PROPS : {}), {\n      className: anchorClasses\n    }), hasIcon ? // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n    // so that we always render this class\n    React.createElement(\"span\", {\n      className: CoreClasses.MENU_ITEM_ICON\n    }, React.createElement(Icon, {\n      icon: icon,\n      \"aria-hidden\": true,\n      tabIndex: -1\n    })) : undefined, React.createElement(Text, {\n      className: classNames(CoreClasses.FILL, textClassName),\n      ellipsize: !multiline,\n      title: htmlTitle\n    }, text), this.maybeRenderLabel(labelElement), hasSubmenu ? React.createElement(Icon, {\n      className: CoreClasses.MENU_SUBMENU_ICON,\n      icon: \"caret-right\"\n    }) : undefined);\n    var liClasses = classNames((_b = {}, _b[CoreClasses.MENU_SUBMENU] = hasSubmenu, _b));\n    return React.createElement(\"li\", {\n      className: liClasses,\n      role: liRole,\n      \"aria-selected\": ariaSelected\n    }, this.maybeRenderPopover(target, children));\n  };\n\n  MenuItem2.prototype.maybeRenderLabel = function (labelElement) {\n    var _a = this.props,\n        label = _a.label,\n        labelClassName = _a.labelClassName;\n\n    if (label == null && labelElement == null) {\n      return null;\n    }\n\n    return React.createElement(\"span\", {\n      className: classNames(CoreClasses.MENU_ITEM_LABEL, labelClassName)\n    }, label, labelElement);\n  };\n\n  MenuItem2.prototype.maybeRenderPopover = function (target, children) {\n    if (children == null) {\n      return target;\n    }\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        popoverProps = _a.popoverProps,\n        submenuProps = _a.submenuProps;\n    return React.createElement(Popover2, __assign({\n      autoFocus: false,\n      captureDismiss: false,\n      disabled: disabled,\n      enforceFocus: false,\n      hoverCloseDelay: 0,\n      interactionKind: \"hover\",\n      modifiers: SUBMENU_POPOVER_MODIFIERS,\n      placement: \"right-start\",\n      usePortal: false\n    }, popoverProps, {\n      content: React.createElement(Menu, __assign({}, submenuProps), children),\n      minimal: true,\n      popoverClassName: classNames(CoreClasses.MENU_SUBMENU, popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.popoverClassName)\n    }), target);\n  };\n\n  MenuItem2.defaultProps = {\n    active: false,\n    disabled: false,\n    multiline: false,\n    popoverProps: {},\n    selected: undefined,\n    shouldDismissPopover: true,\n    text: \"\"\n  };\n  MenuItem2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MenuItem2\");\n  return MenuItem2;\n}(AbstractPureComponent2);\n\nexport { MenuItem2 };\nvar SUBMENU_POPOVER_MODIFIERS = {\n  // 20px padding - scrollbar width + a bit\n  flip: {\n    options: {\n      rootBoundary: \"viewport\",\n      padding: 20\n    },\n    enabled: true\n  },\n  // shift popover up 5px so MenuItems align\n  offset: {\n    options: {\n      offset: [-5, 0]\n    },\n    enabled: true\n  },\n  preventOverflow: {\n    options: {\n      rootBoundary: \"viewport\",\n      padding: 20\n    },\n    enabled: true\n  }\n}; // props to ignore when disabled\n\nvar DISABLED_PROPS = {\n  href: undefined,\n  onClick: undefined,\n  onMouseDown: undefined,\n  onMouseEnter: undefined,\n  onMouseLeave: undefined,\n  tabIndex: -1\n};","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","CoreClasses","DISPLAYNAME_PREFIX","Icon","Menu","Text","Popover2","__extends","MenuItem2","_d","props","active","className","children","disabled","intent","labelClassName","labelElement","multiline","popoverProps","_e","roleStructure","selected","shouldDismissPopover","submenuProps","text","textClassName","_f","tagName","htmlTitle","htmlProps","undefined","icon","_c","Boolean","liRole","targetRole","ariaSelected","hasIcon","hasSubmenu","intentClass","anchorClasses","MENU_ITEM","_a","ACTIVE","DISABLED","POPOVER2_DISMISS","SELECTED","target","createElement","__assign","role","tabIndex","DISABLED_PROPS","MENU_ITEM_ICON","FILL","ellipsize","title","maybeRenderLabel","MENU_SUBMENU_ICON","liClasses","_b","MENU_SUBMENU","maybeRenderPopover","label","MENU_ITEM_LABEL","autoFocus","captureDismiss","enforceFocus","hoverCloseDelay","interactionKind","modifiers","SUBMENU_POPOVER_MODIFIERS","placement","usePortal","content","minimal","popoverClassName","flip","options","rootBoundary","padding","enabled","offset","preventOverflow","href","onClick","onMouseDown","onMouseEnter","onMouseLeave"],"sources":["/home/administrator/Рабочий стол/inform48-react/inform48/node_modules/@blueprintjs/popover2/src/menuItem2.tsx"],"sourcesContent":["/*\n * Copyright 2022 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport {\n    AbstractPureComponent2,\n    ActionProps,\n    Classes as CoreClasses,\n    DISPLAYNAME_PREFIX,\n    Icon,\n    LinkProps,\n    Menu,\n    MenuProps,\n    Text,\n} from \"@blueprintjs/core\";\n\nimport * as Classes from \"./classes\";\nimport { Popover2, Popover2Props } from \"./popover2\";\n\nexport interface MenuItem2Props extends ActionProps, LinkProps {\n    /** Item text, required for usability. */\n    text: React.ReactNode;\n\n    /**\n     * Whether this item should appear _active_, often useful to\n     * indicate keyboard focus. Note that this is distinct from _selected_\n     * appearance, which has its own prop.\n     */\n    active?: boolean;\n\n    /**\n     * Children of this component will be rendered in a _submenu_\n     * that appears in a popover when hovering or clicking on this item.\n     *\n     * Use `text` prop for the content of the menu item itself.\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Whether this menu item is non-interactive. Enabling this prop will ignore `href`, `tabIndex`,\n     * and mouse event handlers (in particular click, down, enter, leave).\n     */\n    disabled?: boolean;\n\n    /**\n     * Right-aligned label text content, useful for displaying hotkeys.\n     *\n     * This prop actually supports JSX elements, but TypeScript will throw an error because\n     * `HTMLAttributes` only allows strings. Use `labelElement` to supply a JSX element in TypeScript.\n     */\n    label?: string;\n\n    /**\n     * A space-delimited list of class names to pass along to the right-aligned label wrapper element.\n     */\n    labelClassName?: string;\n\n    /**\n     * Right-aligned label content, useful for displaying hotkeys.\n     */\n    labelElement?: React.ReactNode;\n\n    /**\n     * Changes the ARIA `role` property structure of this MenuItem to accomodate for various\n     * different `role`s of the parent Menu `ul` element.\n     *\n     * If `menuitem`, role structure becomes:\n     *\n     * `<li role=\"none\"`\n     *     `<a role=\"menuitem\"`\n     *\n     * which is proper role structure for a `<ul role=\"menu\"` parent (this is the default `role` of a `Menu`).\n     *\n     * If `listoption`, role structure becomes:\n     *\n     * `<li role=\"option\"`\n     *     `<a role=undefined`\n     *\n     *  which is proper role structure for a `<ul role=\"listbox\"` parent, or a `<select>` parent.\n     *\n     * @default \"menuitem\"\n     */\n    roleStructure?: \"menuitem\" | \"listoption\";\n\n    /**\n     * Whether the text should be allowed to wrap to multiple lines.\n     * If `false`, text will be truncated with an ellipsis when it reaches `max-width`.\n     *\n     * @default false\n     */\n    multiline?: boolean;\n\n    /**\n     * Props to spread to the submenu popover. Note that `content` and `minimal` cannot be\n     * changed and `usePortal` defaults to `false` so all submenus will live in\n     * the same container.\n     */\n    popoverProps?: Partial<Omit<Popover2Props, \"content\" | \"minimal\">>;\n\n    /**\n     * Whether this item should appear selected.\n     * Defining this  will set the `aria-selected` attribute and apply a\n     * \"check\" or \"blank\" icon on the item (unless the `icon` prop is set,\n     * which always takes precedence).\n     *\n     * @default undefined\n     */\n    selected?: boolean;\n\n    /**\n     * Whether an enabled item without a submenu should automatically close its parent popover when clicked.\n     *\n     * @default true\n     */\n    shouldDismissPopover?: boolean;\n\n    /**\n     * Props to spread to the child `Menu` component if this item has a submenu.\n     */\n    submenuProps?: Partial<MenuProps>;\n\n    /**\n     * Name of the HTML tag that wraps the MenuItem.\n     *\n     * @default \"a\"\n     */\n    tagName?: keyof JSX.IntrinsicElements;\n\n    /**\n     * A space-delimited list of class names to pass along to the text wrapper element.\n     */\n    textClassName?: string;\n\n    /**\n     * HTML title to be passed to the <Text> component\n     */\n    htmlTitle?: string;\n}\n\nexport class MenuItem2 extends AbstractPureComponent2<MenuItem2Props & React.AnchorHTMLAttributes<HTMLAnchorElement>> {\n    public static defaultProps: MenuItem2Props = {\n        active: false,\n        disabled: false,\n        multiline: false,\n        popoverProps: {},\n        selected: undefined,\n        shouldDismissPopover: true,\n        text: \"\",\n    };\n\n    public static displayName = `${DISPLAYNAME_PREFIX}.MenuItem2`;\n\n    public render() {\n        const {\n            active,\n            className,\n            children,\n            disabled,\n            intent,\n            labelClassName,\n            labelElement,\n            multiline,\n            popoverProps,\n            roleStructure = \"menuitem\",\n            selected,\n            shouldDismissPopover,\n            submenuProps,\n            text,\n            textClassName,\n            tagName = \"a\",\n            htmlTitle,\n            ...htmlProps\n        } = this.props;\n\n        const [liRole, targetRole, icon, ariaSelected] =\n            roleStructure === \"listoption\"\n                ? // \"listoption\": parent has listbox role, or is a <select>\n                  [\n                      \"option\",\n                      undefined, // target should have no role\n                      this.props.icon ?? (selected === undefined ? undefined : selected ? \"small-tick\" : \"blank\"),\n                      Boolean(selected), // aria-selected prop\n                  ]\n                : // \"menuitem\": parent has menu role\n                  [\n                      \"none\",\n                      \"menuitem\",\n                      this.props.icon,\n                      undefined, // don't set aria-selected prop\n                  ];\n\n        const hasIcon = icon != null;\n        const hasSubmenu = children != null;\n\n        const intentClass = CoreClasses.intentClass(intent);\n        const anchorClasses = classNames(\n            CoreClasses.MENU_ITEM,\n            intentClass,\n            {\n                [CoreClasses.ACTIVE]: active,\n                [CoreClasses.DISABLED]: disabled,\n                // prevent popover from closing when clicking on submenu trigger or disabled item\n                [Classes.POPOVER2_DISMISS]: shouldDismissPopover && !disabled && !hasSubmenu,\n                [CoreClasses.SELECTED]: active && intentClass === undefined,\n            },\n            className,\n        );\n\n        const target = React.createElement(\n            tagName,\n            {\n                role: targetRole,\n                tabIndex: 0,\n                ...htmlProps,\n                ...(disabled ? DISABLED_PROPS : {}),\n                className: anchorClasses,\n            },\n            hasIcon ? (\n                // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n                // so that we always render this class\n                <span className={CoreClasses.MENU_ITEM_ICON}>\n                    <Icon icon={icon} aria-hidden={true} tabIndex={-1} />\n                </span>\n            ) : undefined,\n            <Text className={classNames(CoreClasses.FILL, textClassName)} ellipsize={!multiline} title={htmlTitle}>\n                {text}\n            </Text>,\n            this.maybeRenderLabel(labelElement),\n            hasSubmenu ? <Icon className={CoreClasses.MENU_SUBMENU_ICON} icon=\"caret-right\" /> : undefined,\n        );\n\n        const liClasses = classNames({ [CoreClasses.MENU_SUBMENU]: hasSubmenu });\n        return (\n            <li className={liClasses} role={liRole} aria-selected={ariaSelected}>\n                {this.maybeRenderPopover(target, children)}\n            </li>\n        );\n    }\n\n    private maybeRenderLabel(labelElement?: React.ReactNode) {\n        const { label, labelClassName } = this.props;\n        if (label == null && labelElement == null) {\n            return null;\n        }\n        return (\n            <span className={classNames(CoreClasses.MENU_ITEM_LABEL, labelClassName)}>\n                {label}\n                {labelElement}\n            </span>\n        );\n    }\n\n    private maybeRenderPopover(target: JSX.Element, children?: React.ReactNode) {\n        if (children == null) {\n            return target;\n        }\n        const { disabled, popoverProps, submenuProps } = this.props;\n        return (\n            <Popover2\n                autoFocus={false}\n                captureDismiss={false}\n                disabled={disabled}\n                enforceFocus={false}\n                hoverCloseDelay={0}\n                interactionKind=\"hover\"\n                modifiers={SUBMENU_POPOVER_MODIFIERS}\n                placement=\"right-start\"\n                usePortal={false}\n                {...popoverProps}\n                content={<Menu {...submenuProps}>{children}</Menu>}\n                minimal={true}\n                popoverClassName={classNames(CoreClasses.MENU_SUBMENU, popoverProps?.popoverClassName)}\n            >\n                {target}\n            </Popover2>\n        );\n    }\n}\n\nconst SUBMENU_POPOVER_MODIFIERS: Popover2Props[\"modifiers\"] = {\n    // 20px padding - scrollbar width + a bit\n    flip: { options: { rootBoundary: \"viewport\", padding: 20 }, enabled: true },\n    // shift popover up 5px so MenuItems align\n    offset: { options: { offset: [-5, 0] }, enabled: true },\n    preventOverflow: { options: { rootBoundary: \"viewport\", padding: 20 }, enabled: true },\n};\n\n// props to ignore when disabled\nconst DISABLED_PROPS: React.AnchorHTMLAttributes<HTMLAnchorElement> = {\n    href: undefined,\n    onClick: undefined,\n    onMouseDown: undefined,\n    onMouseEnter: undefined,\n    onMouseLeave: undefined,\n    tabIndex: -1,\n};\n"]},"metadata":{},"sourceType":"module"}