{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __extends } from \"tslib\";\nimport { ResizeObserver } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\n\nvar ResizeSensor2 =\n/** @class */\nfunction (_super) {\n  __extends(ResizeSensor2, _super);\n\n  function ResizeSensor2() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.targetRef = React.createRef();\n    _this.prevElement = undefined;\n    _this.observer = new ResizeObserver(function (entries) {\n      var _a, _b;\n\n      return (_b = (_a = _this.props).onResize) === null || _b === void 0 ? void 0 : _b.call(_a, entries);\n    });\n    return _this;\n  }\n\n  ResizeSensor2.prototype.render = function () {\n    var onlyChild = React.Children.only(this.props.children); // if we're provided a ref to the child already, we don't need to attach one ourselves\n\n    if (this.props.targetRef !== undefined) {\n      return onlyChild;\n    }\n\n    return React.cloneElement(onlyChild, {\n      ref: this.targetRef\n    });\n  };\n\n  ResizeSensor2.prototype.componentDidMount = function () {\n    this.observeElement();\n  };\n\n  ResizeSensor2.prototype.componentDidUpdate = function (prevProps) {\n    this.observeElement(this.props.observeParents !== prevProps.observeParents);\n  };\n\n  ResizeSensor2.prototype.componentWillUnmount = function () {\n    this.observer.disconnect();\n  };\n  /**\n   * Observe the DOM element, if defined and different from the currently\n   * observed element. Pass `force` argument to skip element checks and always\n   * re-observe.\n   */\n\n\n  ResizeSensor2.prototype.observeElement = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!(this.targetRef.current instanceof Element)) {\n      // stop everything if not defined\n      this.observer.disconnect();\n      return;\n    }\n\n    if (this.targetRef.current === this.prevElement && !force) {\n      // quit if given same element -- nothing to update (unless forced)\n      return;\n    } else {\n      // clear observer list if new element\n      this.observer.disconnect(); // remember element reference for next time\n\n      this.prevElement = this.targetRef.current;\n    } // observer callback is invoked immediately when observing new elements\n\n\n    this.observer.observe(this.targetRef.current);\n\n    if (this.props.observeParents) {\n      var parent_1 = this.targetRef.current.parentElement;\n\n      while (parent_1 != null) {\n        this.observer.observe(parent_1);\n        parent_1 = parent_1.parentElement;\n      }\n    }\n  };\n\n  ResizeSensor2.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".ResizeSensor2\");\n  return ResizeSensor2;\n}(AbstractPureComponent2);\n\nexport { ResizeSensor2 };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,cAAT,QAAoD,yBAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,mBAA3D;;AAyCA;AAAA;AAAA;EAAmCC;;EAAnC;IAAA;;IAGYC,kBAAYJ,KAAK,CAACK,SAAN,EAAZ;IAEAD,oBAAuCE,SAAvC;IAEAF,iBAAW,IAAIL,cAAJ,CAAmB,mBAAO;MAAA;;MAAI,wBAAI,CAACQ,KAAL,EAAWC,QAAX,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmB,MAAnB,GAAmBA,YAAGC,OAAH,CAAnB;IAA8B,CAA5D,CAAX;;EA0DX;;EAxDUC,iCAAP;IACI,IAAMC,SAAS,GAAGZ,KAAK,CAACa,QAAN,CAAeC,IAAf,CAAoB,KAAKP,KAAL,CAAWQ,QAA/B,CAAlB,CADJ,CAGI;;IACA,IAAI,KAAKR,KAAL,CAAWS,SAAX,KAAyBV,SAA7B,EAAwC;MACpC,OAAOM,SAAP;IACH;;IAED,OAAOZ,KAAK,CAACiB,YAAN,CAAmBL,SAAnB,EAA8B;MAAEM,GAAG,EAAE,KAAKF;IAAZ,CAA9B,CAAP;EACH,CATM;;EAWAL,4CAAP;IACI,KAAKQ,cAAL;EACH,CAFM;;EAIAR,6CAAP,UAA0BS,SAA1B,EAAuD;IACnD,KAAKD,cAAL,CAAoB,KAAKZ,KAAL,CAAWc,cAAX,KAA8BD,SAAS,CAACC,cAA5D;EACH,CAFM;;EAIAV,+CAAP;IACI,KAAKW,QAAL,CAAcC,UAAd;EACH,CAFM;EAIP;;;;;;;EAKQZ,yCAAR,UAAuBa,KAAvB,EAAoC;IAAb;MAAAA;IAAa;;IAChC,IAAI,EAAE,KAAKR,SAAL,CAAeS,OAAf,YAAkCC,OAApC,CAAJ,EAAkD;MAC9C;MACA,KAAKJ,QAAL,CAAcC,UAAd;MACA;IACH;;IAED,IAAI,KAAKP,SAAL,CAAeS,OAAf,KAA2B,KAAKE,WAAhC,IAA+C,CAACH,KAApD,EAA2D;MACvD;MACA;IACH,CAHD,MAGO;MACH;MACA,KAAKF,QAAL,CAAcC,UAAd,GAFG,CAGH;;MACA,KAAKI,WAAL,GAAmB,KAAKX,SAAL,CAAeS,OAAlC;IACH,CAf+B,CAiBhC;;;IACA,KAAKH,QAAL,CAAcM,OAAd,CAAsB,KAAKZ,SAAL,CAAeS,OAArC;;IAEA,IAAI,KAAKlB,KAAL,CAAWc,cAAf,EAA+B;MAC3B,IAAIQ,QAAM,GAAG,KAAKb,SAAL,CAAeS,OAAf,CAAuBK,aAApC;;MACA,OAAOD,QAAM,IAAI,IAAjB,EAAuB;QACnB,KAAKP,QAAL,CAAcM,OAAd,CAAsBC,QAAtB;QACAA,QAAM,GAAGA,QAAM,CAACC,aAAhB;MACH;IACJ;EACJ,CA3BO;;EApCMnB,4BAAc,UAAGT,kBAAH,EAAqB,gBAArB,CAAd;EAgElB;AAAC,CAjED,CAAmCD,sBAAnC;;SAAaU","names":["ResizeObserver","React","AbstractPureComponent2","DISPLAYNAME_PREFIX","__extends","_this","createRef","undefined","props","onResize","_b","entries","ResizeSensor2","onlyChild","Children","only","children","targetRef","cloneElement","ref","observeElement","prevProps","observeParents","observer","disconnect","force","current","Element","prevElement","observe","parent_1","parentElement"],"sources":["/home/administrator/Рабочий стол/inform48-react/inform48/node_modules/@blueprintjs/popover2/src/resizeSensor2.tsx"],"sourcesContent":["/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResizeObserver, ResizeObserverEntry } from \"@juggle/resize-observer\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, DISPLAYNAME_PREFIX } from \"@blueprintjs/core\";\n\n/** `ResizeSensor2` requires a single DOM element child and will error otherwise. */\nexport interface ResizeSensor2Props {\n    /**\n     * Single child, must be an element and not a string or fragment.\n     */\n    children: JSX.Element;\n\n    /**\n     * Callback invoked when the wrapped element resizes.\n     *\n     * The `entries` array contains an entry for each observed element. In the\n     * default case (no `observeParents`), the array will contain only one\n     * element: the single child of the `ResizeSensor`.\n     *\n     * Note that this method is called _asynchronously_ after a resize is\n     * detected and typically it will be called no more than once per frame.\n     */\n    onResize: (entries: ResizeObserverEntry[]) => void;\n\n    /**\n     * If `true`, all parent DOM elements of the container will also be\n     * observed for size changes. The array of entries passed to `onResize`\n     * will now contain an entry for each parent element up to the root of the\n     * document.\n     *\n     * Only enable this prop if a parent element resizes in a way that does\n     * not also cause the child element to resize.\n     *\n     * @default false\n     */\n    observeParents?: boolean;\n\n    /**\n     * If you attach a `ref` to the child yourself when rendering it, you must pass the\n     * same value here (otherwise, ResizeSensor won't be able to attach its own).\n     */\n    targetRef?: React.Ref<any>;\n}\n\nexport class ResizeSensor2 extends AbstractPureComponent2<ResizeSensor2Props> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.ResizeSensor2`;\n\n    private targetRef = React.createRef<HTMLElement>();\n\n    private prevElement: HTMLElement | undefined = undefined;\n\n    private observer = new ResizeObserver(entries => this.props.onResize?.(entries));\n\n    public render() {\n        const onlyChild = React.Children.only(this.props.children);\n\n        // if we're provided a ref to the child already, we don't need to attach one ourselves\n        if (this.props.targetRef !== undefined) {\n            return onlyChild;\n        }\n\n        return React.cloneElement(onlyChild, { ref: this.targetRef });\n    }\n\n    public componentDidMount() {\n        this.observeElement();\n    }\n\n    public componentDidUpdate(prevProps: ResizeSensor2Props) {\n        this.observeElement(this.props.observeParents !== prevProps.observeParents);\n    }\n\n    public componentWillUnmount() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Observe the DOM element, if defined and different from the currently\n     * observed element. Pass `force` argument to skip element checks and always\n     * re-observe.\n     */\n    private observeElement(force = false) {\n        if (!(this.targetRef.current instanceof Element)) {\n            // stop everything if not defined\n            this.observer.disconnect();\n            return;\n        }\n\n        if (this.targetRef.current === this.prevElement && !force) {\n            // quit if given same element -- nothing to update (unless forced)\n            return;\n        } else {\n            // clear observer list if new element\n            this.observer.disconnect();\n            // remember element reference for next time\n            this.prevElement = this.targetRef.current;\n        }\n\n        // observer callback is invoked immediately when observing new elements\n        this.observer.observe(this.targetRef.current);\n\n        if (this.props.observeParents) {\n            let parent = this.targetRef.current.parentElement;\n            while (parent != null) {\n                this.observer.observe(parent);\n                parent = parent.parentElement;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}