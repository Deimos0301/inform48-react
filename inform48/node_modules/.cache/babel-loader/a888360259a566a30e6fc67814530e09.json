{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\n/* eslint-disable deprecation/deprecation */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, Position } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Icon } from \"../icon/icon\";\nimport { Popover, PopoverInteractionKind } from \"../popover/popover\";\nimport { Text } from \"../text/text\";\nimport { Menu } from \"./menu\";\n/** @deprecated use { MenuItem2 } from \"@blueprintjs/popover2\" instead */\n\nvar MenuItem =\n/** @class */\nfunction (_super) {\n  __extends(MenuItem, _super);\n\n  function MenuItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MenuItem.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n        // eslint-disable-next-line deprecation/deprecation\n    active = _c.active,\n        className = _c.className,\n        children = _c.children,\n        disabled = _c.disabled,\n        icon = _c.icon,\n        intent = _c.intent,\n        labelClassName = _c.labelClassName,\n        labelElement = _c.labelElement,\n        multiline = _c.multiline,\n        popoverProps = _c.popoverProps,\n        _d = _c.roleStructure,\n        roleStructure = _d === void 0 ? \"menuitem\" : _d,\n        selected = _c.selected,\n        shouldDismissPopover = _c.shouldDismissPopover,\n        submenuProps = _c.submenuProps,\n        text = _c.text,\n        textClassName = _c.textClassName,\n        _e = _c.tagName,\n        tagName = _e === void 0 ? \"a\" : _e,\n        htmlTitle = _c.htmlTitle,\n        htmlProps = __rest(_c, [\"active\", \"className\", \"children\", \"disabled\", \"icon\", \"intent\", \"labelClassName\", \"labelElement\", \"multiline\", \"popoverProps\", \"roleStructure\", \"selected\", \"shouldDismissPopover\", \"submenuProps\", \"text\", \"textClassName\", \"tagName\", \"htmlTitle\"]);\n\n    var hasIcon = icon != null;\n    var hasSubmenu = children != null;\n    var intentClass = Classes.intentClass(intent);\n    var anchorClasses = classNames(Classes.MENU_ITEM, intentClass, (_a = {}, _a[Classes.ACTIVE] = active, _a[Classes.DISABLED] = disabled, // prevent popover from closing when clicking on submenu trigger or disabled item\n    _a[Classes.POPOVER_DISMISS] = shouldDismissPopover && !disabled && !hasSubmenu, _a[Classes.SELECTED] = selected || active && intentClass === undefined, _a), className);\n\n    var _f = roleStructure === \"listoption\" ? [\"option\", undefined, active || selected] // parent has listbox role, or is a <select>\n    : [\"none\", \"menuitem\", undefined],\n        liRole = _f[0],\n        targetRole = _f[1],\n        ariaSelected = _f[2]; // parent has menu role\n\n\n    var target = React.createElement(tagName, __assign(__assign(__assign({\n      role: targetRole,\n      tabIndex: 0\n    }, htmlProps), disabled ? DISABLED_PROPS : {}), {\n      className: anchorClasses\n    }), hasIcon ? // wrap icon in a <span> in case `icon` is a custom element rather than a built-in icon identifier,\n    // so that we always render this class\n    React.createElement(\"span\", {\n      className: Classes.MENU_ITEM_ICON\n    }, React.createElement(Icon, {\n      icon: icon,\n      \"aria-hidden\": true,\n      tabIndex: -1\n    })) : undefined, React.createElement(Text, {\n      className: classNames(Classes.FILL, textClassName),\n      ellipsize: !multiline,\n      title: htmlTitle\n    }, text), this.maybeRenderLabel(labelElement), hasSubmenu ? React.createElement(Icon, {\n      className: Classes.MENU_SUBMENU_ICON,\n      icon: \"caret-right\"\n    }) : undefined);\n    var liClasses = classNames((_b = {}, _b[Classes.MENU_SUBMENU] = hasSubmenu, _b));\n    return React.createElement(\"li\", {\n      className: liClasses,\n      role: liRole,\n      \"aria-selected\": ariaSelected\n    }, this.maybeRenderPopover(target, children));\n  };\n\n  MenuItem.prototype.maybeRenderLabel = function (labelElement) {\n    var _a = this.props,\n        label = _a.label,\n        labelClassName = _a.labelClassName;\n\n    if (label == null && labelElement == null) {\n      return null;\n    }\n\n    return React.createElement(\"span\", {\n      className: classNames(Classes.MENU_ITEM_LABEL, labelClassName)\n    }, label, labelElement);\n  };\n\n  MenuItem.prototype.maybeRenderPopover = function (target, children) {\n    if (children == null) {\n      return target;\n    }\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        popoverProps = _a.popoverProps,\n        submenuProps = _a.submenuProps;\n    return React.createElement(Popover, __assign({\n      autoFocus: false,\n      captureDismiss: false,\n      disabled: disabled,\n      enforceFocus: false,\n      hoverCloseDelay: 0,\n      interactionKind: PopoverInteractionKind.HOVER,\n      modifiers: SUBMENU_POPOVER_MODIFIERS,\n      position: Position.RIGHT_TOP,\n      usePortal: false\n    }, popoverProps, {\n      content: React.createElement(Menu, __assign({}, submenuProps), children),\n      minimal: true,\n      popoverClassName: classNames(Classes.MENU_SUBMENU, popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.popoverClassName),\n      target: target\n    }));\n  };\n\n  MenuItem.defaultProps = {\n    active: false,\n    disabled: false,\n    multiline: false,\n    popoverProps: {},\n    selected: false,\n    shouldDismissPopover: true,\n    text: \"\"\n  };\n  MenuItem.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MenuItem\");\n  return MenuItem;\n}(AbstractPureComponent2);\n\nexport { MenuItem };\nvar SUBMENU_POPOVER_MODIFIERS = {\n  // 20px padding - scrollbar width + a bit\n  flip: {\n    boundariesElement: \"viewport\",\n    padding: 20\n  },\n  // shift popover up 5px so MenuItems align\n  offset: {\n    offset: -5\n  },\n  preventOverflow: {\n    boundariesElement: \"viewport\",\n    padding: 20\n  }\n}; // props to ignore when disabled\n\nvar DISABLED_PROPS = {\n  href: undefined,\n  onClick: undefined,\n  onMouseDown: undefined,\n  onMouseEnter: undefined,\n  onMouseLeave: undefined,\n  tabIndex: -1\n};","map":null,"metadata":{},"sourceType":"module"}